@using MyHebrewBible.Client.Layout
@using MyHebrewBible.Client.Components.BibleLookup.Toolbar.PrevNext
@using MyHebrewBible.Client.Components.BibleLookup.Toolbar.Books
@using MyHebrewBible.Client.Components.BibleLookup.Toolbar.Chapters

<nav class="navbar navbar-expand bg-primary-subtle fixed-top">

	<div class="collapse navbar-collapse justify-content-start">

		<div class="ps-1">
			<HomeButton />
		</div>

	</div>

	<div class="collapse navbar-collapse justify-content-center">
		<div class="">
			<PreviousButton PreviousBookAndChapter="@CurrentBookAndChapter"
											buttonToShow="ButtonsToShow.PreviousOnly"
											IsXs="isXs"
											OnBookAndChapterSelected="@ReturnedBookAndChapter" />
		</div>

		<div class="px-1">
			<BookModal CurrentBookAndChapter="CurrentBookAndChapter"
								 MediaQuery="MediaQuery"
								 OnBookSelected="ReturnedBook" />
		</div>

		<div class="pe-1">
			<ChapterModal CurrentBookAndChapter="CurrentBookAndChapter"
										MediaQuery="MediaQuery"
										OnChapterFilterSelected="OnBookAndChapterSelected" />
		</div>

		<div class="">
			<NextButton NextBookAndChapter="@CurrentBookAndChapter"
									buttonToShow="ButtonsToShow.NextOnly"
									IsXs="isXs"
									OnBookAndChapterSelected="@ReturnedBookAndChapter" />
		</div>

	</div>

	<div class="collapse navbar-collapse justify-content-end">
		<div class="pe-1">
			<PageInstructions />
		</div>
	</div>
</nav>

@code {
	[Parameter, EditorRequired] public BookAndChapter? CurrentBookAndChapter { get; set; }
	[Parameter, EditorRequired] public GlobalEnums.MediaQuery? MediaQuery { get; set; }
	[Parameter, EditorRequired] public EventCallback<BookAndChapter> OnBookAndChapterSelected { get; set; }

	private string TitleOrAbrv => MediaQuery == GlobalEnums.MediaQuery.Xs ? CurrentBookAndChapter!.BibleBook!.Abrv : CurrentBookAndChapter!.BibleBook!.Title;
	private bool isXs => MediaQuery == GlobalEnums.MediaQuery.Xs ? true : false;

	private void ReturnedBook(Enums.BibleBook bibleBook)
	{
		OnBookAndChapterSelected.InvokeAsync(new BookAndChapter(bibleBook, 1)); 
	}

	private void ReturnedBookAndChapter(BookAndChapter bookAndChapter)
	{
		OnBookAndChapterSelected.InvokeAsync(bookAndChapter);
	}

}