@using MyHebrewBible.Client.Helpers

@inject ApiClient Api
@inject IToastService? Toast
@inject ILogger<HebrewParagraph>? Logger

<LoadingComponent IsLoading="hebrewWords == null" TurnSpinnerOff="TurnSpinnerOff">
	<p dir="rtl" class=" mb-1">
		@foreach (var item in hebrewWords!)
		{
			@if (HebrewWordNumbers)
			{
				<sup><span class="px-1 text-muted fst-italic">@item.WordCount</span></sup>
			}
			<span class="hebrew @GetBgColor(item.Strongs, item.WordCount)"
						@onclick="@(e => ButtonWordClick(item.Strongs, item.WordCount))">
				@((MarkupString)HebrewFormat.GetSpan(item.WordEnum, item.Hebrew1, item.Hebrew2, item.Hebrew3))
				@HebrewFormat.CheckMaqqef(item.WordEnum, item.Hebrew1, item.Hebrew2, item.Hebrew3)
			</span>
		}
	</p>
</LoadingComponent>

@code {
	[Parameter, EditorRequired] public int ScriptureId { get; set; }
	[Parameter, EditorRequired] public WordSelected? WordSelected { get; set; }
	[Parameter, EditorRequired] public bool HebrewWordNumbers { get; set; }
	[Parameter] public EventCallback<WordSelected?> OnWordSelected { get; set; }

	protected bool TurnSpinnerOff = false;

	private ICollection<WordPartByScriptureId>? hebrewWords = null;
	protected override async Task OnParametersSetAsync()
	{
		try
		{
			hebrewWords = await Api!.GetWordPartByScriptureIdAsync(ScriptureId);
			//if (!hebrewWords.Any()) { Toast!.ShowWarning($"No records found for ScriptureId: {ScriptureId}"); }
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnParametersSetAsync));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(HebrewTable)}!{nameof(OnParametersSetAsync)}");
		}
		finally
		{
			TurnSpinnerOff = true;
		}
	}

	protected string GetBgColor(int strongs, int wordCount)
	{
		if (WordSelected is null) return string.Empty;
		if (strongs == 0) return string.Empty;

		if (strongs == WordSelected.Strongs)
		{
			return " bg-warning-subtle";
		}
		else
		{
			return string.Empty;
		}
	}

	protected int WordCount = 0;
	private void ButtonWordClick(int strongs, int wordCount)
	{
		//Toast!.ShowInfo($"Strongs/WordCount: {strongs}/{wordCount}");
		WordCount = wordCount;
		OnWordSelected.InvokeAsync(new WordSelected(strongs, wordCount));
	}
}
