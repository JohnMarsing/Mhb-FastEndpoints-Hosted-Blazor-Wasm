@using MyHebrewBible.Client.Helpers

@inject ApiClient Api
@inject IToastService? Toast
@inject ILogger<HebrewTable>? Logger

<LoadingComponent IsLoading="items==null" TurnSpinnerOff="TurnSpinnerOff">

	<div class="mx-1">
		<TableTemplate Items="items!.ToList()" TheadCSS="table-secondary"
									 RowClassSelector="@(item => item.Strongs == WordSelected!.Strongs ? "table-success" : "")">
			<TableHeader>
				<th class="">KJV</th>
				<th class=""><i>Transliteration</i></th>
				<th class=""><span class="float-end">Hebrew</span></th>
				<th class="">#</th>
				@if (!IsXs)
				{
					<th class="">Strong&apos;s</th>
				}
			</TableHeader>
			<RowTemplate>
				<td>@context.KjvWord</td>
				<td>@context.Transliteration</td>
				<td class="hebrew">
					@((MarkupString)HebrewFormat.GetSpan(context.WordEnum, context.Hebrew1, context.Hebrew2, context.Hebrew3))
					@HebrewFormat.CheckMaqqef(context.WordEnum, context.Hebrew1, context.Hebrew2, context.Hebrew3)
				</td>
				@if (IsXs)
				{
					<td><sup>@GlobalEnums.BibleAnchors.StrongsH_td_Xs(context.Strongs, context.WordCount)</sup></td>
				}
				else
				{
					<td> <sup>@context.WordCount</sup></td>
					<td class="">@GlobalEnums.BibleAnchors.StrongsH_td(context.Strongs)</td>
				}
			</RowTemplate>
		</TableTemplate>
	</div>

</LoadingComponent>

@code {
	[Parameter, EditorRequired] public int ScriptureId { get; set; }
	[Parameter, EditorRequired] public WordSelected? WordSelected { get; set; }
	[Parameter, EditorRequired] public bool Filter { get; set; }
	[Parameter, EditorRequired] public bool IsXs { get; set; }

	protected string HeaderCSS => IsXs ? "table table-sm" : "table ";

	protected bool TurnSpinnerOff = false;
	protected IQueryable<WordPartByScriptureId>? items;

	protected override async Task OnParametersSetAsync()
	{
		ICollection<WordPartByScriptureId>? hebrewWords;
		try
		{
			hebrewWords = await Api!.GetWordPartByScriptureIdAsync(ScriptureId);
			if (!hebrewWords.Any())
			{
				Toast!.ShowWarning($"No records found for ScriptureId: {ScriptureId}");
			}
			else
			{
				if (Filter && WordSelected!.Strongs != 0)
				{
					items = hebrewWords.AsQueryable().Where(w => w.Strongs == WordSelected.Strongs).OrderBy(o => o.WordCount);
				}
				else
				{
					items = hebrewWords.AsQueryable().OrderBy(o => o.WordCount);
				}
				//Logger!.LogInformation("{Method}; RowCnt: {RowCnt}", nameof(OnParametersSetAsync), items.Count());
			}
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnParametersSetAsync));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(HebrewTable)}!{nameof(OnParametersSetAsync)}");
		}
		finally
		{
			TurnSpinnerOff = true;
		}
	}

}
