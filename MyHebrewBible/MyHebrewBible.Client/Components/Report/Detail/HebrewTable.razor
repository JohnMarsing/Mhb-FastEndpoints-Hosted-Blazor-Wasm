@using MyHebrewBible.Client.Helpers

@inject ApiClient Api
@inject IToastService? Toast
@inject ILogger<HebrewTable>? Logger

<LoadingComponent IsLoading="hebrewWords==null" TurnSpinnerOff="TurnSpinnerOff">

	<div class="mx-1">
		<table class="@HeaderCSS">
			<thead class="table-light">
				<tr>
					<th class="">KJV</th>
					<th class="">Transliteration</th>
					<th class=""><span class="float-end">Hebrew</span></th>
					<th class="">#</th>
					@if (!IsXs)
					{
						<th class="">Strong&apos;s</th>
					}
				</tr>
			</thead>
			<tbody>

				@if (Filter && hebrewWordsFilter is not null)
				{
					@foreach (var item in hebrewWordsFilter!)
					{
						<tr class="@(item.Strongs != 0 && item.Strongs == WordSelected!.Strongs ? "table-success" : "")">
							<td class="">@item.KjvWord</td>
							<td class=""><i>@item.Transliteration</i></td>
							<td class="hebrew">
								@((MarkupString)HebrewFormat.GetSpan(item.WordEnum, item.Hebrew1, item.Hebrew2, item.Hebrew3))
								@HebrewFormat.CheckMaqqef(item.WordEnum, item.Hebrew1, item.Hebrew2, item.Hebrew3)
							</td>

							@if (IsXs)
							{
								<td><sup>@GlobalEnums.BibleAnchors.StrongsH_td_Xs(item.Strongs, item.WordCount)</sup></td>
							}
							else
							{
								<td> <sup>@item.WordCount</sup></td>
								<td class="">@GlobalEnums.BibleAnchors.StrongsH_td(item.Strongs)</td>
							}
						</tr>
					}
				}
				else
				{
					@foreach (var item in hebrewWords!)
					{
						<tr class="@(item.Strongs != 0 && item.Strongs == WordSelected!.Strongs ? "table-success" : "")">
							<td class="">@item.KjvWord</td>
							<td class=""><i>@item.Transliteration</i></td>
							<td class="hebrew">
								@((MarkupString)HebrewFormat.GetSpan(item.WordEnum, item.Hebrew1, item.Hebrew2, item.Hebrew3))
								@HebrewFormat.CheckMaqqef(item.WordEnum, item.Hebrew1, item.Hebrew2, item.Hebrew3)
							</td>
							@if (IsXs)
							{
								<td><sup>@GlobalEnums.BibleAnchors.StrongsH_td_Xs(item.Strongs, item.WordCount)</sup></td>
							}
							else
							{
								<td> <sup>@item.WordCount</sup></td>
								<td class="">@GlobalEnums.BibleAnchors.StrongsH_td(item.Strongs)</td>
							}
						</tr>
					}

				}
			</tbody>
		</table>
	</div>

</LoadingComponent>

@code {

	[Parameter, EditorRequired] public int ScriptureId { get; set; }
	[Parameter, EditorRequired] public WordSelected? WordSelected { get; set; }
	[Parameter, EditorRequired] public bool Filter { get; set; }
	[Parameter, EditorRequired] public bool IsXs { get; set; }

	protected bool TurnSpinnerOff = false;

	private ICollection<WordPartByScriptureId>? hebrewWords = null;

	private List<WordPartByScriptureId>? hebrewWordsFilter = null;

	protected string HeaderCSS => IsXs ? "table table-sm" : "table ";

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			hebrewWords = await Api!.GetWordPartByScriptureIdAsync(ScriptureId);
			//if (!hebrewWords.Any()) { Toast!.ShowWarning($"No records found for ScriptureId: {ScriptureId}"); }
			if (!hebrewWords.Any())
			{
				Toast!.ShowWarning($"No records found for ScriptureId: {ScriptureId}");
			}
			else
			{
				if (Filter && WordSelected!.Strongs != 0)
				{
					hebrewWordsFilter = hebrewWords.Where(w => w.Strongs == WordSelected!.Strongs).OrderBy(o => o.WordCount).ToList();
				}
			}
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnParametersSetAsync));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(HebrewTable)}!{nameof(OnParametersSetAsync)}");
		}
		finally
		{
			TurnSpinnerOff = true;
		}
	}

}
