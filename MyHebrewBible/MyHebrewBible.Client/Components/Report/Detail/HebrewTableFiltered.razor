@using MyHebrewBible.Client.Helpers

@inject ApiClient Api
@inject IToastService? Toast
@inject ILogger<HebrewTableFiltered>? Logger

@if (WordSelected is not null)
{
	<LoadingComponent IsLoading="items==null" TurnSpinnerOff="TurnSpinnerOff">

		<TableTemplate Items="items!.ToList()" HeaderCSS="@HeaderCSS" TheadCSS="table-secondary" TRCSS="table-success">
			<TableHeader>
				<th class=""></th> @* bump  *@
				<th class="">KJV</th>
				<th class="">Transliteration</th>
				<th class=""><span class="float-end">Hebrew</span></th>
				<th class="">#</th>
				@if (!IsXs)
				{
					<th class="">Strong&apos;s</th>
				}
			</TableHeader>
			<RowTemplate>
				<td class=""></td>
				<td>@context.KjvWord</td>
				<td><i>@context.Transliteration</i></td>
				<td class="hebrew">
					@((MarkupString)HebrewFormat.GetSpan(context.WordEnum, context.Hebrew1, context.Hebrew2, context.Hebrew3))
					@HebrewFormat.CheckMaqqef(context.WordEnum, context.Hebrew1, context.Hebrew2, context.Hebrew3)
				</td>
				@if (IsXs)
				{
					<td><sup>@GlobalEnums.BibleAnchors.StrongsH_td_Xs(context.Strongs, context.WordCount)</sup></td>
				}
				else
				{
					<td> <sup>@context.WordCount</sup></td>
					<td class="">@GlobalEnums.BibleAnchors.StrongsH_td(context.Strongs)</td>
				}
			</RowTemplate>
		</TableTemplate>

	</LoadingComponent>
}

@code {

	[Parameter, EditorRequired] public int ScriptureId { get; set; }
	[Parameter, EditorRequired] public WordSelected? WordSelected { get; set; } 
	[Parameter, EditorRequired] public bool IsXs { get; set; }

	protected bool TurnSpinnerOff = false;
	protected string HeaderCSS => IsXs ? "table table-sm" : "table ";

	protected IQueryable<WordPartByStrongs>? items;

	protected override async Task OnParametersSetAsync()
	{
		ICollection<WordPartByStrongs>? hebrewWords;
		try
		{
			hebrewWords = await Api!.GetWordPartByStrongsAsync(ScriptureId, WordSelected!.Strongs);

			if (hebrewWords.Any())
			{
				items = hebrewWords.AsQueryable().Where(w => w.Strongs == WordSelected!.Strongs).OrderBy(o => o.WordCount);
				//Logger!.LogInformation("{Method}; RowCnt: {RowCnt}", nameof(OnParametersSetAsync), items.Count());
			}
			else
			{
				// ToDo: Bug; This is occurring because the user selected another verse and that verse doesn't have the Strong's from the previous WordSelected
				// e.g. you pick Gen 1:3 and select Light (H216), then go to Gen 1:4, the HebrewTableFiltered will show up because Light is in that verse as well
				//Toast!.ShowWarning($"No records found for Id: {ScriptureId}; Strongs: {WordSelected!.Strongs}");
				//Logger!.LogWarning("{Method}; WordSelected: {WordSelected}", nameof(OnParametersSetAsync), WordSelected);
			}
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnParametersSetAsync));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(HebrewTableFiltered)}!{nameof(OnParametersSetAsync)}");
		}
		finally
		{
			TurnSpinnerOff = true;
		}
	}
}
