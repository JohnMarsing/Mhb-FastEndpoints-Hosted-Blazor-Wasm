@inject ApiClient Api
@inject IToastService? Toast
@inject ILogger<ParagraphWithWordButtons>? Logger

<LoadingComponent IsLoading="kjvWords==null" TurnSpinnerOff="TurnSpinnerOff">

	<p class="fs-5">
		@foreach (var item in kjvWords!)
		{
			if (item.Strongs != 0)
			{
				if (item.WordCount != WordCount | WordCount == 0)
				{
					<span class="bg-info-subtle text-decoration-underline me-2"
					@onclick="@(e => ButtonWordClick(item.Strongs, item.WordCount))">
						@item.Word
					</span>
				}
				else
				{
					<span class="bg-warning-subtle me-2"> @item.Word</span>
				}
			}
			else
			{
				<span class="bg-dark-subtle text-black-50 me-2 "> @item.Word</span>
			}
		}
	</p>

</LoadingComponent>

@code {
	[Parameter, EditorRequired] public int ScriptureId { get; set; }
	[Parameter] public EventCallback<WordSelected?> OnWordSelected { get; set; }

	protected bool TurnSpinnerOff = false;
	
	private ICollection<WordPartKjv>? kjvWords = null;
	protected override async Task OnParametersSetAsync()
	{
		try
		{
			kjvWords = await Api.GetWordPartKjvAsync(ScriptureId);
			//if (!kjvWords.Any()) { 	Toast!.ShowWarning($"No records found for ScriptureId: {ScriptureId}");	}
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnParametersSetAsync));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(ParagraphWithWordButtons)}!{nameof(OnParametersSetAsync)}");
		}
		finally
		{
			TurnSpinnerOff = true;
		}
	}

	protected int WordCount = 0;
	private void ButtonWordClick(int strongs, int wordCount)
	{
		//Toast!.ShowInfo($"Strongs/WordCount: {strongs}/{wordCount}");
		WordCount = wordCount;
		OnWordSelected.InvokeAsync(new WordSelected(strongs, wordCount));
	}

	// Ignore Spelling: Strongs
}

