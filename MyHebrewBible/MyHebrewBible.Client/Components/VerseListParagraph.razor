@using MyHebrewBible.Client.Enums

@inject ApiClient Api
@inject ILogger<VerseListParagraph>? Logger
@inject IToastService? Toast

<h3>@VerseRangeDTO!.BCV</h3>

<LoadingComponent IsLoading="verses == null" TurnSpinnerOff="TurnSpinnerOff">
	@foreach (var item in verses!)
	{
@* 		
	@onclick="@(e => ButtonClick(item.ID, item.Verse))"
 *@
		<p class="fs-5">
			<a title="@item.BCV">
				<sup class="btn btn-outline-primary py-0 px-1">
					<b>@item.Verse</b>
				</sup>
			</a>
			@((MarkupString)@item.KJV!)
		</p>

	}
</LoadingComponent>

@code {
	[Parameter, EditorRequired] public VerseRangeDTO? VerseRangeDTO { get; set; }

	//protected long VerseRowCount;

	private ICollection<VerseList>? verses = null;
	protected bool TurnSpinnerOff = false;

	protected override async Task OnInitializedAsync()
	{
		Logger!.LogInformation("{Class}!{Method}", nameof(VerseListParagraph), nameof(OnInitializedAsync));
		try
		{
			await Task.Delay(500);  // ToDo: comment this out in production
			if (VerseRangeDTO!.BegId >= VerseRangeDTO.EndId) throw new System.ApplicationException("BegId >= EndId");
			if (VerseRangeDTO!.EndId - VerseRangeDTO.BegId > 300) throw new System.ApplicationException("Verse range can not exceed 300"); // ToDo: extract this
			verses = await Api!.GetVerseListAsync(VerseRangeDTO.BegId, VerseRangeDTO.EndId);
			//VerseRowCount = verses.Count;
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Class}!{Method}", nameof(VerseListParagraph), nameof(OnInitializedAsync));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(VerseListParagraph)}!{nameof(OnInitialized)}");
		}
		finally
		{
			TurnSpinnerOff = true;
		}
	}
}
