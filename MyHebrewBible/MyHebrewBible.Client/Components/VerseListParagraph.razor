@using MyHebrewBible.Client.Enums

@inject ApiClient Api
@inject ILogger<VerseListParagraph>? Logger
@inject IToastService? Toast

<h3>Verse Paragraph <sup>@BegId-@EndId</sup> </h3>

<LoadingComponent IsLoading="verses == null" TurnSpinnerOff="TurnSpinnerOff">
	@foreach (var item in verses!)
	{
		<p class="ps-2 mb-2">
			<sup class="fw-bold">@item.Verse</sup>
			@item.KJV
		</p>
	}
</LoadingComponent>

@code {
	[Parameter, EditorRequired] public long BegId { get; set; }
	[Parameter, EditorRequired] public long EndId { get; set; }

	//protected long VerseRowCount;

	private ICollection<VerseList>? verses = null;
	protected bool TurnSpinnerOff = false;

	protected override async Task OnInitializedAsync()
	{
		Logger!.LogInformation("{Class}!{Method}", nameof(VerseListParagraph), nameof(OnInitializedAsync));
		try
		{
			await Task.Delay(500);  // ToDo: comment this out in production
			if (BegId >= EndId) throw new System.ApplicationException("BegId >= EndId");
			if (EndId - BegId > 300) throw new System.ApplicationException("Verse range can not exceed 300"); // ToDo: extract this 
			verses = await Api!.GetVerseListAsync(BegId, EndId);
			//VerseRowCount = verses.Count;
		}
		catch (Exception ex)
		{
			Logger!.LogError("{Class}!{Method}: ErrorType: {Type}; Message: {Message}"
				, nameof(VerseListParagraph), nameof(OnInitialized), ex.GetType(), ex.Message);
			Toast!.ShowError($"{Global.ToastShowError} {nameof(VerseListParagraph)}!{nameof(OnInitialized)}");
		}
		finally
		{
			TurnSpinnerOff = true;
		}
	}
}
