@inject ApiClient Api
@inject IToastService? Toast
@inject ILogger<Sections>? Logger

@* <SectionsDebug FocusScriptureId="@FocusScriptureId" VerseRowCount="@VerseRowCount" VerseNumber="@VerseNumber" Strongs="@Strongs" Hebrew="@Hebrew"  /> *@

@* <LoadingComponent IsLoading="verses == null" TurnSpinnerOff="TurnSpinnerOff">
</LoadingComponent>
 *@

@if (verses == null)
{
	<p><em>Loading verses...</em></p>
}
else
{
	if (CalledBy == Enums.CalledBy.VerseList)
	{
		if (FocusScriptureId == 0)
		{
			<SingleVerse VerseList="versesTop" OnVerseSelected="ReturnedVerse" />
		}
		else
		{
			@if (versesTop is not null)
			{
				<SingleVerse VerseList="versesTop" OnVerseSelected="ReturnedVerse" />
			}

			<WordSegmentsCard ScriptureId="FocusScriptureId"
												VerseNumber="VerseNumber"
												SelectedWordCount="WordCount"
												BookChapterVerseVM="VM"
												OnStrongsSelected="ReturnedStrongs" />

			@if (Strongs != 0)
			{
				<HebrewTable ScriptureId="FocusScriptureId"
										 Strongs="Strongs"
										 OnHebrewSelected="ReturnedHebrew" />
			}
			@* 
				@if (versesBottom is not null)
				{
					<ParagraphBottom BottomVerses="versesBottom" OnVerseSelected="ReturnedVerse" />
				}
			*@		
		}

	}
	else
	{
		if (FocusScriptureId == 0)
		{
			<ParagraphTop TopVerses="versesTop" OnVerseSelected="ReturnedVerse" />
		}
		else
		{
			@if (versesTop is not null)
			{
				<ParagraphTop TopVerses="versesTop" OnVerseSelected="ReturnedVerse" />
			}

			<WordSegmentsCard ScriptureId="FocusScriptureId"
												VerseNumber="VerseNumber"
												SelectedWordCount="WordCount"
												BookChapterVerseVM="VM"
												OnStrongsSelected="ReturnedStrongs" />

			@if (Strongs != 0)
			{
				<HebrewTable ScriptureId="FocusScriptureId"
										 Strongs="Strongs"
										 OnHebrewSelected="ReturnedHebrew" />
			}

			@if (versesBottom is not null)
			{
				<ParagraphBottom BottomVerses="versesBottom" OnVerseSelected="ReturnedVerse" />
			}
		}
	}
}


@code {
	[Parameter, EditorRequired] public BookChapterVerseVM? VM { get; set; }
	[Parameter, EditorRequired] public Enums.CalledBy? CalledBy { get; set; }

	//protected bool TurnSpinnerOff = false;

	protected long FocusScriptureId; // = 0;
	protected long VerseRowCount; // = 0;
	protected long VerseNumber; // = 0;
	protected long TopRC = 0;
	protected long Strongs = 0;
	protected string? Hebrew;
	protected long WordCount = 0;

	public List<BibleVerse>? versesTop;    
	public List<BibleVerse>? versesBottom;

	private ICollection<BibleVerse>? verses = null;

	protected override async Task OnParametersSetAsync()
	{
		Logger!.LogInformation("{Class}!{Method}, CalledBy: {CalledBy}"
			, nameof(Sections), nameof(OnParametersSetAsync), CalledBy.ToString() ?? "Empty or Null");

		FocusScriptureId = 0;

		if (VM is null | VM!.BibleBook is null)
		{
			Toast!.ShowWarning($"Parameter BookChapterVerseVM is null");
		}
		else
		{
			try
			{
				if (CalledBy==Enums.CalledBy.VerseList)
				{
					await Task.Delay(5);
					verses = await Api!.GetVerseListByBCVAsync((long)VM!.BibleBook, (long)VM.Chapter, (long)VM.Verse, (long)VM.Verse);
				}
				else
				{
					await Task.Delay(5);
					verses = await Api!.GetBookChapterAsync((long)VM!.BibleBook, (long)VM.Chapter);
				}

				VerseRowCount = verses.Count;
				PopulateTopAndBottom(VerseRowCount);

			}
			catch (Exception ex)
			{
				Logger!.LogError(ex, "Components.VerseSections!{Class}!{Method}", nameof(Sections), nameof(OnParametersSetAsync));
				Toast!.ShowError($"{Global.ToastShowError} {nameof(Sections)}!{nameof(OnParametersSetAsync)}");
			}
			finally
			{
				//TurnSpinnerOff = true;
			}
		}

	}

	private void ReturnedVerse(ScriptureIdAndVerseNumber scriptureIdAndVerseNumber)
	{
		Logger!.LogInformation("{Class}!{Method}, scriptureIdAndVerseNumber: {scriptureIdAndVerseNumber}"
		, nameof(Sections), nameof(ReturnedVerse), scriptureIdAndVerseNumber);

		FocusScriptureId = scriptureIdAndVerseNumber.ScriptureID;
		VerseNumber = scriptureIdAndVerseNumber.VerseNumber;
		WordCount = 0;
		Strongs = 0;
		PopulateTopAndBottom(VerseNumber);
	}

	private void PopulateTopAndBottom(long verseSplit)
	{
		Logger!.LogInformation("{Class}!{Method}, verseSplit: {verseSplit}"
			, nameof(Sections), nameof(PopulateTopAndBottom), verseSplit);


		if (CalledBy == Enums.CalledBy.VerseList)
		{
			versesTop = verses!.OrderBy(o => o.Verse).ToList();
		}
		else
		{
			if (FocusScriptureId == 0)
			{
				versesTop = verses!.Where(w => w.Verse <= verseSplit).OrderBy(o => o.Verse).ToList();
			}
			else
			{
				versesTop = verses!.Where(w => w.Verse < verseSplit).OrderBy(o => o.Verse).ToList();
				versesBottom = verses!.Where(w => w.Verse > verseSplit).OrderBy(o => o.Verse).ToList();
			}

		}
		
		TopRC = versesTop.Count();
	}

	private void ReturnedStrongs(StrongsAndWordCount strongsAndWordCount)
	{
		if (strongsAndWordCount.Strongs == 0)
		{
			FocusScriptureId = 0;
			PopulateTopAndBottom(VerseRowCount);
		}
		Strongs = strongsAndWordCount.Strongs;
		WordCount = strongsAndWordCount.WordCount;
	}

	private void ReturnedHebrew(string hebrew)
	{
		Hebrew = hebrew;
	}

}
