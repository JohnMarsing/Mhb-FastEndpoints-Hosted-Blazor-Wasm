@using MyHebrewBible.Client.Helpers
@using BLBEnum=MyHebrewBible.Client.Enums.BLB

@inject ApiClient Api
@inject IToastService? Toast

@if (hebrewWordList == null || kjvWords == null)
{
	if (hebrewWordList == null)
	{
		<p><em> Hebrew Words Loading...</em></p>
	}
	else
	{
		<p><em> KJV Words Loading...</em></p>
	}
}
else
{
	@* @if (BookAndChapter!.BibleBook!.Value > Helpers.VerseFacts.LastBookInOT)   *@

	<div class="card  border-primary mt-2 mb-4">

		<div class="card-body">
			<div class="card-header">
				<div class="d-flex justify-content-center">
					<h6>
						<span class="btn btn-outline-success py-0 px-1"><b>@BookAndChapterAT!.BookChaptersVerses.BibleBook.Title  @VerseNumber</b></span>
						<button type="button" class="mt-1 btn btn-danger btn-sm" @onclick="ButtonCloseClick">
							<i class="fas fa-times"></i>        
						</button>
						@* <span class='float-end'>@BLBEnum.WLC.AnchorBCV(BookAndChapter, (int)VerseNumber)</span> *@
					</h6>
				</div>
			</div>
		</div>

		@* <div class="card-body"></div> *@
		<p class="fs-5 mx-2 px-0">
			@foreach (var item in kjvWords)
			{
				if (item.Strongs is not null)
				{
					@* if (item.WordCount != SelectedWordCount | SelectedWordCount == 0) *@
					if (item.WordCount != WordCount | WordCount == 0)
					{
						<span class="bg-info-subtle text-decoration-underline me-2"
									@onclick="@(e => ButtonWordClick((long)item.Strongs, item.WordCount))">
							@item.Word
						</span>
					}
					else
					{
						<span class="bg-info-subtle me-2"> @item.Word</span>
					}
				}
				else
				{
					<span class="bg-dark-subtle text-black-50 me-2 "> @item.Word</span>
				}
			}
		</p>

		<div class="mx-1">
			<table class="@HeaderCSS">
				<thead class="@TheadCSS">
					@* <tr>@TableHeader</tr> *@
					<tr>
						<th class="">KJV</th>
						<th class="">Strong&apos;s</th>
						<th class="">
							<span class="float-end">Hebrew</span>
						</th>
						<th class="">#</th>
						<th class="text-center text-danger"><i class="fas fa-exclamation"></i></th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in hebrewWordList)
					{
						<tr class="@(item.Strongs != 0 && item.Strongs == Strongs ? "table-success" : "")">
							<td class="">@item.KjvWord</td>
							<td class="">@((MarkupString)@item.StrongsH) </td>
							<td class="hebrew16">
								@((MarkupString)HebrewFormat.GetSpan(item.WordEnum, item.Hebrew1, item.Hebrew2, item.Hebrew3))
								@HebrewFormat.CheckMaqqef(item.WordEnum, item.Hebrew1, item.Hebrew2, item.Hebrew3)
							</td>
							<td> <sup>@item.WordCount</sup></td>
							<td class="text-center">
								<button type="button" class="mt-1 btn btn-outline-success btn-sm" title="Add hebrew to the MHB translation (•‿•)"
												@onclick="@(e => ButtonAddClick(item.Hebrew1))">
									<small><i class="fas fa-plus"></i></small>
								</button>
							</td>
						</tr>
					}
				</tbody>
				@* 				<tfoot>	<tr class="@TableFooterColor">@TableFooter</tr>	</tfoot> *@
			</table>
		</div>
	</div>
}


@code {
	protected string HeaderCSS { get; set; } = "table table-condensed table-sm";  // mx-1
	public string TheadCSS { get; set; } = "table-light";

	[Parameter, EditorRequired] public BookAndChapterAT? BookAndChapterAT { get; set; }
	[Parameter, EditorRequired] public long ScriptureId { get; set; }
	[Parameter, EditorRequired] public long VerseNumber { get; set; }
	[Parameter] public EventCallback<StrongsAndWordCount?> OnStrongsSelected { get; set; }

	protected long FocusScriptureId; // = 0;
	protected long VerseRowCount; // = 0;
																//protected long VerseNumber; // = 0;
	protected long Strongs = 0;
	protected string? Hebrew;  // ToDo: Not fully implemented
	protected long WordCount = 0;

	private ICollection<WordPartKjv>? kjvWords = null;
	private ICollection<WordPart>? hebrewWords = null;
	private List<WordPart>? hebrewWordList;

	protected override async Task OnParametersSetAsync()
	{
		kjvWords = await Api.GetWordPartKjvAsync(ScriptureId);
		hebrewWords = await Api!.GetWordPartByScriptureIdAsync(ScriptureId);
		hebrewWordList = hebrewWords.ToList();
	}

	private void ButtonCloseClick()
	{
		OnStrongsSelected.InvokeAsync(new StrongsAndWordCount(0, 0));
	}

	private void ButtonAddClick(string hebrew)
	{
		Toast!.ShowWarning("Not yet implemented (◡︵◡)");
		//OnHebrewSelected.InvokeAsync(hebrew);
	}

	private void ButtonWordClick(long strongs, long wordCount)
	{
		//Toast!.ShowInfo($"Strongs/WordCount: {strongs}/{wordCount}");
		Strongs = strongs;
		WordCount = wordCount;
		OnStrongsSelected.InvokeAsync(new StrongsAndWordCount((int)strongs, wordCount));
	}


}
