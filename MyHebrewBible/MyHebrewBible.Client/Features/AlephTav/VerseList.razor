@using MyHebrewBible.Client.Helpers
@using MyHebrewBible.Client.Enums

@inject ILogger<VerseList>? Logger
@inject IToastService? Toast
@inject ApiClient Api

<h3 class="text-center mt-4">
	<span class="badge bg-warning-subtle  text-black">Standalone Aleph Tav Verses</span>
</h3>

@if (DetailWordList == null)
{
	<p><em>DetailWordList Loading...</em></p>
}
else
{
	if (SummaryVerseList == null)
	{
		<p><em>SummaryList is Loading...</em></p>
	}
	else
	{
		@foreach (var item in SummaryVerseList)
		{
			<div class="card  border-primary my-2">
				<div class="card-body">
					<h5 class="card-title ">
						<span>@BLB.WLC.AnchorBCV(VM!.AlephTavSummary.BibleBook!.Value, (int)item.Chapter, (int)item.Verse)</span>
						@if (item.HasTwo == 1) @* 1==true *@
						{
							<text>&nbsp;</text>
							<span class="text-danger">את</span> <span class="text-danger">את</span>
						}
					</h5>

					<p class="hebrew">
						@foreach (var item2 in DetailWordList.Where(w => w.BCV == item.BCV))
						{
							@((MarkupString)HebrewFormat.GetSpan(item2.WordEnum, item2.Hebrew1, item2.Hebrew2, item2.Hebrew3))
							@HebrewFormat.CheckMaqqef(item2.WordEnum, item2.Hebrew1, item2.Hebrew2, item2.Hebrew3)
						}
					</p>
				</div>
			</div>
		}
	}
}

@code {
	[Parameter, EditorRequired]	public VerseListVM? VM { get; set; }

	private ICollection<AlephTavHebrewVerse>? DetailWordList = null;
	private List<SummaryVM>? SummaryVerseList;

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			DetailWordList = await Api!.GetAlephTavHebrewVersesAsync(VM!.AlephTavSummary.BibleBook!.Value, VM!.Chapter);

			SummaryVerseList = DetailWordList
				.GroupBy(d => new { d.BCV, d.ScriptureID, d.Chapter, d.Verse, d.HasTwo })
				.Select(g => new SummaryVM(
						g.Key.ScriptureID,
						g.Key.BCV,
						g.Key.Chapter,
						g.Key.Verse,
						g.Key.HasTwo,
						g.Count() // This gives us the RowCnt, which is the count of rows grouped by BCV and Id
				))
				.ToList();
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnParametersSetAsync));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(VerseList)}!{nameof(OnParametersSetAsync)}");
		}
	}
}

