@inject ILogger<Details>? Logger 
@inject ApiClient? Api 
@inject IToastService? Toast 

@if (article is not null)
{
	<div class="card bg-light mb-3">
		<div class="card-header">
			<h5 class="text-primary text-center"><b>@article!.Title</b> @((MarkupString)@article.IsFavoriteHtml)  </h5>
		</div>

		<div class="card-body">
			@if (!String.IsNullOrEmpty(@article.DetailsMD))
			{
				<div class="card-text">
					<b>Details MD</b> <br />
					@((MarkupString)@article.DetailsMD)
				</div>
			}
			else
			{
				@* <p class="text-muted">No details(md) at this time.&nbsp;<span class="fa fa-frown-o"></span></p> *@
			}

			@if (!String.IsNullOrEmpty(@article.Details))
			{
				<div class="card-text">
					<b>Details</b> <br />
					@((MarkupString)@article.Details)
				</div>
			}
			else
			{
				@* <p class="text-muted">No details at this time.&nbsp;<span class="fa fa-frown-o"></span></p> *@
			}
		</div>

		@if (article.PrimaryScriptureId != 31102)
		{
			<div class="card-body">
				<div class="card-text">
					<VerseParagraph VerseParagraphRange="VerseParagraphRange" />
				</div>
			</div>
		}

		<div class="card-footer mt-2">

			<div class="card-body text-center">
				@if (article.DocBlobID != null)
				{
					<a class="btn btn-sm btn-outline-success" target="_blank" role="button" href='@($"{Blobs.ArticleUrl}{article.FileNameNoExt}.doc")'>
						<i class="fas fa-cloud-download-alt fa-2x float-end"></i>
						<span class="fas fa-file-word fa-2x"></span> <br />@($"{article.DocBlobID}")  @* far fa-file-word-o   *@
					</a>
				}

				@if (article.PdfBlobID != null)
				{
					<a class="btn btn-sm btn-outline-primary" target="_blank"  role="button" href='@($"{Blobs.ArticleUrl}{article.FileNameNoExt}.pdf")'>
						<i class="fas fa-cloud-download-alt fa-2x float-end"></i>
						<span class="far fa-file-pdf fa-2x"></span> <br />@($"{article.PdfBlobID}")
					</a>
				}
			</div>
		</div>



	</div>
}
else
{
	<p><em>Loading article...</em></p>
}

@code{
	[Parameter, EditorRequired] public int ArticleId { get; set; }

	protected Article? article;
	private VerseParagraphRange? VerseParagraphRange; 

	protected override async Task OnParametersSetAsync()
	{
		//Logger!.LogInformation("{Method}; ArticleId: {ArticleId}", nameof(OnParametersSetAsync), ArticleId);
		try
		{
			article = await Api!.GetArticleAsync(ArticleId);
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnParametersSetAsync));
			// ToDo: figure out how to do Fast-Endpoints Union Types / TypedResults-thinga-muh-jigger
		}

		if (article is null)
		{
			Toast!.ShowWarning($"Article Id {ArticleId} not found");
		}
		else
		{
			if (!String.IsNullOrEmpty(article.RelatedVersesHtml))
			{
				VerseParagraphRange = new VerseParagraphRange(article.PrimaryScriptureId, article.PrimaryScriptureId + article.ExtraVerses, article.RelatedVersesHtml);
			}
		}
	}

}