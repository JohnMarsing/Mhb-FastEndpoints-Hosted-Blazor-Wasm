@page "/bookchapter"

@using MyHebrewBible.Client.State
@using MyHebrewBible.Client.Layout

@using MyHebrewBible.Client.Components.BibleLookup.Toolbar;
@using MyHebrewBible.Client.Features.BookChapter.Verses

@inject IToastService? Toast

@inject AppState? AppState
@implements IDisposable

<PageTitle>@PageTitle</PageTitle>

<div class="@GlobalEnums.MediaQuery.Xs.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Xs" />
</div>
<div class="@GlobalEnums.MediaQuery.Sm.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Sm" />
</div>
<div class="@GlobalEnums.MediaQuery.Md.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Md" />
</div>
<div class="@GlobalEnums.MediaQuery.Lg.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Lg" />
</div>
<div class="@GlobalEnums.MediaQuery.Xl.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Xl" />
</div>

<div class="mt-5">
	<br />
	<Sections BookAndChapter="CurrentBookAndChapter" />
</div>

@code {
	[CascadingParameter] public ProcessError? ProcessError { get; set; }

	public BookAndChapter? CurrentBookAndChapter { get; set; }
	//protected string PageTitle => GlobalEnums.BibleBookFormat.BC(CurrentBookAndChapter, useAbrv: false);

	protected string PageTitle = string.Empty;

	void IDisposable.Dispose() => AppState!.BookChapterState!.OnChange -= StateHasChanged;

	protected override void OnInitialized()
	{
		try
		{
			AppState!.BookChapterState!.OnChange += StateHasChanged;
			if (AppState.BookChapterState is null)
			{
				Toast!.ShowWarning($"AppState.BookChapterState is null");
			}
			else
			{
				BibleBookIdAndChapter bibleBookIdAndChapter = AppState.BookChapterState.Get();
				BookAndChapter bc = new BookAndChapter(GlobalEnums.BibleBook.FromValue(bibleBookIdAndChapter.BibleBookId), bibleBookIdAndChapter.Chapter);
				PageTitle = GlobalEnums.BibleBookFormat.BC(bc);
				CurrentBookAndChapter = new BookAndChapter(GlobalEnums.BibleBook.FromValue(bibleBookIdAndChapter.BibleBookId), bibleBookIdAndChapter.Chapter);
			}
		}
		catch (Exception ex)
		{
			ProcessError?.LogError(ex);
		}
	}


	private void ReturnedBookAndChapter(BookAndChapter bookAndChapter)  //  record BookAndChapter(BibleBook? BibleBook, int Chapter);
	{
		/*
		CurrentBookAndChapter = bookAndChapter!;
		AppState!.BookChapterState!.Update(new State.BibleBookIdAndChapter(CurrentBookAndChapter.BibleBook!.Value, CurrentBookAndChapter.Chapter));
		*/
		BibleBookIdAndChapter x = new BibleBookIdAndChapter(bookAndChapter.BibleBook!.Value, bookAndChapter.Chapter);
		//AppState!.BookChapterState!.Update(bookAndChapter);
		AppState!.BookChapterState!.Update(x);
		CurrentBookAndChapter = bookAndChapter!;
	}

}

