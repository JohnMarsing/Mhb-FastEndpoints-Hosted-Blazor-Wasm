@page "/bookchapter"
@using MyHebrewBible.Client.Enums
@using MyHebrewBible.Client.Helpers
@using MyHebrewBible.Client.Features.BookChapter.Search
@using MyHebrewBible.Client.Features.BookChapter.PrevNext
@using MyHebrewBible.Client.Features.BookChapter.Verses

@* @inject ApiClient Api *@

@inject Blazored.LocalStorage.ILocalStorageService localStorage


<PageTitle>Book Chapter</PageTitle>

@* <IndexDebug Msg="@_msg" ReturnedBookAndChapterString="@ReturnedBookAndChapterString" Err="@_err" /> *@

<div class="@MediaQuery.Xs.DivClass">

	<Typeahead BookAndChapterTypeahead="@CurrentBookAndChapter"
						 MediaQuery="@MediaQuery.Xs"
						 OnBookAndChapterSelected="@ReturnedBookAndChapter" />
</div>
<div class="@MediaQuery.Sm.DivClass">
	<Typeahead BookAndChapterTypeahead="@CurrentBookAndChapter"
						 MediaQuery="@MediaQuery.Sm"
						 OnBookAndChapterSelected="@ReturnedBookAndChapter" />
</div>
<div class="@MediaQuery.Md.DivClass">
	<Typeahead BookAndChapterTypeahead="@CurrentBookAndChapter"
						 MediaQuery="@MediaQuery.Md"
						 OnBookAndChapterSelected="@ReturnedBookAndChapter" />
</div>
<div class="@MediaQuery.Lg.DivClass">
	<Typeahead BookAndChapterTypeahead="@CurrentBookAndChapter"
						 MediaQuery="@MediaQuery.Lg"
						 OnBookAndChapterSelected="@ReturnedBookAndChapter" />
</div>
<div class="@MediaQuery.Xl.DivClass">
	<Typeahead BookAndChapterTypeahead="@CurrentBookAndChapter"
						 MediaQuery="@MediaQuery.Xl"
						 OnBookAndChapterSelected="@ReturnedBookAndChapter" />
</div>


@if (CurrentBookAndChapter is not null)
{
	<div class="pb-n1 mt-2 mb-2 border-bottom border-info">
		<div class="d-flex justify-content-between mb-3">
			<div class="ps-2">
				<PreviousButton PreviousBookAndChapter="@CurrentBookAndChapter"
												buttonToShow="ButtonsToShow.PreviousOnly"
												OnBookAndChapterSelected="@ReturnedBookAndChapter" />
			</div>

			<span class="text-center">@CurrentBookAndChapter.BibleBook!.Title @CurrentBookAndChapter.Chapter </span>

			<div class="pe-2">
				<NextButton NextBookAndChapter="@CurrentBookAndChapter"
										buttonToShow="ButtonsToShow.NextOnly"
										OnBookAndChapterSelected="@ReturnedBookAndChapter" />
			</div>
		</div>

	</div>
}

<Sections BookAndChapter="CurrentBookAndChapter" />

@code {
	public BookAndChapter? CurrentBookAndChapter { get; set; }
	const string Key = "biblebookidandchapter";

	protected override async Task OnInitializedAsync()
	{
		await SetBibleBookAndChapter();
	}

	protected string _err = string.Empty;
	protected string _msg = string.Empty;

	protected async Task SetBibleBookAndChapter()
	{
		try
		{
			_msg = $", try and get local storage, Key: {Key}";
			BibleBookIdAndChapter? bibleBookIdAndChapter = await localStorage.GetItemAsync<BibleBookIdAndChapter>(Key);
			if (bibleBookIdAndChapter is null)
			{
				_msg += ", it is null, so add default Gen 1:1";
				bibleBookIdAndChapter = new BibleBookIdAndChapter(BibleBook.Genesis.Value, 1);
				await localStorage.SetItemAsync(Key, bibleBookIdAndChapter);
				CurrentBookAndChapter = new BookAndChapter(BibleBook.Genesis, 1);
			}
			else
			{
				_msg += $", local storage is NOT null, BibleBookId: {bibleBookIdAndChapter.BibleBookId}, Chapter: {bibleBookIdAndChapter.Chapter}";
				CurrentBookAndChapter = new BookAndChapter(BibleBook.FromValue(bibleBookIdAndChapter.BibleBookId), bibleBookIdAndChapter.Chapter);
			}

			_msg += $",  CurrentBookAndChapter: {CurrentBookAndChapter!.ToString()}";

		}
		catch (Exception ex)
		{
			_err = ex.ToString();
		}
	}

	protected string? ReturnedBookAndChapterString;

	private async Task ReturnedBookAndChapter(BookAndChapter bookAndChapter)
	{
		ReturnedBookAndChapterString = bookAndChapter.ToString();
		CurrentBookAndChapter = bookAndChapter!;
		await localStorage.SetItemAsync(Key, new BibleBookIdAndChapter(CurrentBookAndChapter.BibleBook!.Value, CurrentBookAndChapter.Chapter));
	}

}
