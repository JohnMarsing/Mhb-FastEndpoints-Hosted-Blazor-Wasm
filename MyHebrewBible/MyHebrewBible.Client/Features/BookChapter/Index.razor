@page "/bookchapter/{Abrv}/{Chapter:int}/{Verse:int=1}/{ScriptureId:int=0}/"

@using MyHebrewBible.Client.Layout
@using MyHebrewBible.Client.Features.BookChapter.Toolbar
@using MyHebrewBible.Client.Features.BookChapter.UserSettingsEditor
@using BookChapterConstants = MyHebrewBible.Client.Features.BookChapter.Constants
@using NumberPad = MyHebrewBible.Client.Features.BookChapter.Toolbar.NumberPad
@using MyHebrewBible.Client.Features.BookChapter.Toolbar.NumberPad
@using MyHebrewBible.Client.Components.Toolbar
@using MyHebrewBible.Client.Enums

@inject ILogger<Index>? Logger
@inject NavigationManager NavigationManager
@inject IToastService? Toast

<PageTitle>@PageTitle</PageTitle>

<LoadingProgress>
	<NavSkeleton>

		<JustifyStart>
			<HomeDropdownSkeleton>
				<Recent>
					<RecentListPicker OnBCVSelected="ReturnedBCV" />
				</Recent>
				<Parashot>
					<ParashotPicker OnBCVSelected="ReturnedBCV" />
				</Parashot>
			</HomeDropdownSkeleton>
		</JustifyStart>

		<PrevButtonDiv>
			@if (CurrentBookAndChapter is not null)
			{
				<PreviousOrNextButton BookAndChapter="CurrentBookAndChapter"
															IsPrevious=true
															OnBookAndChapterSelected="ReturnedBookAndChapter" />
			}
		</PrevButtonDiv>

		<PickerDiv>
			<div class="@MediaQuery.Xs.DivClass">
				<Picker CurrentBCV="CurrentBCV" OnBCVSelected="ReturnedBCV" IsXs="true" />
			</div>
			<div class="@MediaQuery.SmOrMdOrLgOrXl.DivClass">
				<Picker CurrentBCV="CurrentBCV" OnBCVSelected="ReturnedBCV" IsXs="false" />
			</div>
		</PickerDiv>

		<NextButtonDiv>
			@if (CurrentBookAndChapter is not null)
			{
				<PreviousOrNextButton BookAndChapter="CurrentBookAndChapter"
															IsPrevious=false
															OnBookAndChapterSelected="ReturnedBookAndChapter" />
			}
		</NextButtonDiv>

		<JustifyEnd>
			<MenuTemplate Items="menuItems" OnItemSelected="ReturnedMenuItemId" />
			<EditModal />
		</JustifyEnd>

	</NavSkeleton>


	<div class="mt-5">
		<br />
		@if (CurrentAbrvChapterVerse is not null && CurrentBookAndChapter is not null)
		{
			<ReportWrapper AbrvChapterVerse="CurrentAbrvChapterVerse"
										 BookAndChapter="CurrentBookAndChapter" />
		}
	</div>
</LoadingProgress>


@if (ShowPageInstructionsModal)
{
	<PageInstructions />
}


@code {
	// Route parameters
	[Parameter, EditorRequired] public string Abrv { get; set; } = string.Empty;
	[Parameter, EditorRequired] public int Chapter { get; set; }
	[Parameter] public int Verse { get; set; } = 1; // ToDo:
	[Parameter] public int ScriptureId { get; set; }

	[CascadingParameter] public ProcessError? ProcessError { get; set; } // where is this used?
	[CascadingParameter] public CascadingAppState? State { get; set; }

	public BookAndChapter? CurrentBookAndChapter { get; set; }     // parameter for ReportWrapper
	public AbrvChapterVerse? CurrentAbrvChapterVerse { get; set; } // parameter for ReportWrapper
	public NumberPad.BookChapterVerse? CurrentBCV { get; set; }

	protected string PageTitle = string.Empty;

	protected override void OnParametersSet()
	{
		//Logger!.LogInformation("{Method}, Route: {Abrv}/{Chapter}/{Verse}/{ScriptureId}", nameof(OnParametersSet), Abrv, Chapter, Verse, ScriptureId);
		try
		{
			if (Abrv == Constants.DefaultAbrv)
			{
				AbrvChapterVerse? rec = State!.AppState!.BookChapterState!.GetACV();
				NavigationManager!.NavigateTo($"{BookChapterConstants.BaseUrl}/{rec.Abrv}/{rec.Chapter}/{rec.Verse}/{rec.ScriptureId}");
			}
			else
			{
				//Logger!.LogInformation("{Method}, CallingMethod: {CallingMethod}", nameof(OnParametersSet), nameof(GetAbrvChapterVerseViaRoutes));
				var (abrvChapterVerse, bibleBook) = GetAbrvChapterVerseViaRoutes(Abrv, Chapter, Verse, ScriptureId);
				if (abrvChapterVerse is not null && bibleBook is not null)
				{
					CurrentAbrvChapterVerse = abrvChapterVerse;
					CurrentBookAndChapter = bibleBook;
					CurrentBCV = new NumberPad.BookChapterVerse(bibleBook.BibleBook, Chapter, Verse);

					//Logger!.LogInformation("{Method}, CurrentAbrvChapterVerse: {CurrentAbrvChapterVerse}", nameof(OnParametersSet), CurrentAbrvChapterVerse);
				}
				else
				{
					Toast!.ShowWarning($"abrvChapterVerse and/or bibleBook is null (◡︵◡)");
				}
			}
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnParametersSet));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(Index)}!{nameof(OnParametersSet)}");
		}
	}

	// tuple used by ReportWrapper.
	private (AbrvChapterVerse?, BookAndChapter?) GetAbrvChapterVerseViaRoutes(string abrv, int chapter, int verse, int scriptureId)
	{
		//Logger!.LogInformation("{Method}, abrv/c/v/SID: {abrv}/{chapter}/{verse}/{scriptureId}"
		//, nameof(GetAbrvChapterVerseViaRoutes), abrv, chapter, verse, scriptureId);

		var (errMsg, _value) = GlobalEnums.BibleBookDictionary.GetId(abrv);

		if (String.IsNullOrEmpty(errMsg))
		{
			GlobalEnums.BibleBook? bibleBook;
			if (GlobalEnums.BibleBook.TryFromValue(_value, out bibleBook))
			{
				AbrvChapterVerse acv = new AbrvChapterVerse(bibleBook!.Abrv, chapter, verse, true, scriptureId); //
				return (acv, new BookAndChapter(bibleBook, chapter));
			}
		}
		else
		{
			Logger!.LogWarning("{Method}, {errMsg}", nameof(GetAbrvChapterVerseViaRoutes), errMsg);
			Toast!.ShowWarning(errMsg);
			//ToDo: change the url in the browser to the default book
			return (AbrvChapterVerse.Default, new BookAndChapter(GlobalEnums.BibleBook.Genesis, chapter));
		}
		return (null, null);
	}

	// Called inside <NavSkeleton> by <PreviousOrNextButton>
	private async Task ReturnedBookAndChapter(BookAndChapter bookAndChapter)
	{
		AbrvChapterVerse rec = new AbrvChapterVerse(bookAndChapter.BibleBook!.Abrv, bookAndChapter.Chapter, 1, true, 0);
		//Logger!.LogInformation("{Method}, AbrvChapterVerse: {AbrvChapterVerse}", nameof(ReturnedBookAndChapter), rec);
		NavigationManager!.NavigateTo($"{BookChapterConstants.BaseUrl}/{rec.Abrv}/{rec.Chapter}/{rec.Verse}/{rec.ScriptureId}");

		//
		await State!.AppState!.BookChapterState!.UpdateACV(rec);
		CurrentBookAndChapter = bookAndChapter!;
		//Logger!.LogInformation("{Method}, CurrentBookAndChapter: {CurrentBookAndChapter}", nameof(ReturnedBookAndChapter), CurrentBookAndChapter);
		PageTitle = GlobalEnums.BibleBookFormat.BC(bookAndChapter);
	}

	// Called inside <NavSkeleton>, by <RecentListPicker>, <ParashotPicker> and <Picker>
	private async Task ReturnedBCV(NumberPad.BookChapterVerse bcv)
	{
		AbrvChapterVerse rec = new AbrvChapterVerse(bcv.BibleBook!.Abrv, bcv.Chapter, bcv.Verse, false, 0);
		//Logger!.LogInformation("{Method}, AbrvChapterVerse: {AbrvChapterVerse}", nameof(ReturnedBCV), rec);
		NavigationManager!.NavigateTo($"{BookChapterConstants.BaseUrl}/{rec.Abrv}/{rec.Chapter}/{rec.Verse}/{rec.ScriptureId}");
		await State!.AppState!.BookChapterState!.UpdateACV(rec);
		//Logger!.LogInformation("{Method}, CurrentBookAndChapter: {CurrentBookAndChapter}", nameof(ReturnedBookAndChapter), CurrentBookAndChapter);
		PageTitle = GlobalEnums.BibleBookFormat.BCV(bcv);
	}

	protected bool ShowPageInstructionsModal = false;


	private List<Dictionary<int, string?>> menuItems = Enums.MenuItem.List
				.Select(item => new Dictionary<int, string?> { { item.Value, item.Title } })
				.ToList();

	// Called inside <NavSkeleton> by <MenuTemplate>
	private void ReturnedMenuItemId(int id)
	{
		if (Enums.MenuItem.TryFromValue(id, out Enums.MenuItem? item))
		{
			if (item == Enums.MenuItem.Instructions)
			{
				ShowPageInstructionsModal = !ShowPageInstructionsModal;
			}
			else
			{
				Toast!.ShowWarning($"Menu item {item.Title} not implemented yet (◡︵◡)");
			}
		}
		else
		{
			Logger!.LogWarning("{Method}, Invalid MenuItem: {MenuItem}", nameof(ReturnedMenuItemId), id);
			Toast!.ShowError($"{Global.ToastShowError} {nameof(Index)}!{nameof(ReturnedMenuItemId)} {id}");
			return;
		}
	}
	// Ignore Spelling: bc, rec
}

