@page "/bookchapter/{BookId:int}/{Chapter:int}/{Verse:int=1}/{Slug?}"

@using MyHebrewBible.Client.State.BookChapter
@using MyHebrewBible.Client.Layout
@using MyHebrewBible.Client.Components.BibleLookup.Toolbar;
@using MyHebrewBible.Client.Features.BookChapter

@inject ILogger<Index>? Logger
@inject NavigationManager NavigationManager
@inject IToastService? Toast

<PageTitle>@PageTitle</PageTitle>

<div class="@GlobalEnums.MediaQuery.Xs.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
	OnBookAndChapterSelected="ReturnedBookAndChapter"
	MediaQuery="GlobalEnums.MediaQuery.Xs" />
</div>
<div class="@GlobalEnums.MediaQuery.Sm.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
	OnBookAndChapterSelected="ReturnedBookAndChapter"
	MediaQuery="GlobalEnums.MediaQuery.Sm" />
</div>
<div class="@GlobalEnums.MediaQuery.Md.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
	OnBookAndChapterSelected="ReturnedBookAndChapter"
	MediaQuery="GlobalEnums.MediaQuery.Md" />
</div>
<div class="@GlobalEnums.MediaQuery.Lg.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
	OnBookAndChapterSelected="ReturnedBookAndChapter"
	MediaQuery="GlobalEnums.MediaQuery.Lg" />
</div>
<div class="@GlobalEnums.MediaQuery.Xl.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
	OnBookAndChapterSelected="ReturnedBookAndChapter"
	MediaQuery="GlobalEnums.MediaQuery.Xl" />
</div>

<LoadingProgress>
	<div class="mt-5">
		<br />
		<ReportWrapper BookAndChapter="CurrentBookAndChapter" />	
	</div>
</LoadingProgress>

@code {
	[CascadingParameter] public ProcessError? ProcessError { get; set; }
	[CascadingParameter] public CascadingAppState? CascadingAppState { get; set; }

	[Parameter, EditorRequired] public int BookId { get; set; }
	[Parameter, EditorRequired] public int Chapter { get; set; }
	[Parameter] public int Verse { get; set; } = 1;
	[Parameter] public string? Slug { get; set; } = "default-slug";

	public BookAndChapter? CurrentBookAndChapter { get; set; }

	protected string PageTitle = string.Empty;

	protected override void OnParametersSet()
	{
		Logger!.LogInformation("{Method}, Route: {BookId}/{Chapter}/{Verse}/{Slug}"
			, nameof(OnParametersSet), BookId, Chapter, Verse, Slug);

		if (BookId == 0 && Chapter == 0)
		{
			ReNavigateBackToThisPage();
		}
		else
		{
			CurrentBookAndChapter = GetBookAndChapterViaRoutes(BookId, Chapter);
		}

	}

	private void ReNavigateBackToThisPage()
	{
		BibleBookIdAndChapter? rec;
		rec = CascadingAppState!.AppState!.BookChapterState!.Get();
		if (rec is null)
		{
			Logger!.LogWarning("{Method}, rec is null???", nameof(ReNavigateBackToThisPage));
			Toast!.ShowWarning($"rec is null, BibleBookIdAndChapter not found");
		}
		else
		{
			Enums.BibleBook bibleBook = Enums.BibleBook.FromValue(rec.BibleBookId);
			Logger!.LogInformation("{Method}, BibleBook/Chapter/Verse/Slug: {BibleBook}/{Chapter}/{Verse}/{Slug}"
			 	, nameof(ReNavigateBackToThisPage), bibleBook.Value, rec.Chapter, rec.Verse, rec.Slug);
			NavigationManager!.NavigateTo(GetNavigateToUrl(bibleBook, rec.Chapter, rec.Verse, rec.Slug));
		}
	}

	private string GetNavigateToUrl(MyHebrewBible.Client.Enums.BibleBook? bibleBook, int chapter, int verse, string? slug)
	{
		// slug is not used
		return $"BookChapter/{bibleBook!.Value}/{chapter}/{verse}/{bibleBook!.Abrv}-{chapter}-{verse}";
	}


	private BookAndChapter GetBookAndChapterViaRoutes(int bookId, int chapter)
	{
		BookAndChapter bc;
		bc = new BookAndChapter(GlobalEnums.BibleBook.FromValue(bookId), chapter);

		PageTitle = GlobalEnums.BibleBookFormat.BC(bc);
		return bc;
	}

	private async Task ReturnedBookAndChapter(BookAndChapter bookAndChapter)
	{
		BibleBookIdAndChapter rec = new BibleBookIdAndChapter(bookAndChapter.BibleBook!.Value, bookAndChapter.Chapter, 1);
		string slug = $"{Enums.BibleBook.FromValue(rec.BibleBookId).Abrv}-{rec.Chapter}-{rec.Slug}";
		//Logger!.LogInformation("{Method}, Route: {BookId}/{Chapter}", nameof(ReturnedBookAndChapter), rec.BibleBookId, rec.Chapter);
		NavigationManager!.NavigateTo($"BookChapter/{rec.BibleBookId}/{rec.Chapter}/{rec.Verse}/{slug}");

		await CascadingAppState!.AppState!.BookChapterState!.Update(rec);
		CurrentBookAndChapter = bookAndChapter!;
		//Logger!.LogInformation("{Method}, CurrentBookAndChapter: {CurrentBookAndChapter}", nameof(ReturnedBookAndChapter), CurrentBookAndChapter);
		PageTitle = GlobalEnums.BibleBookFormat.BC(bookAndChapter);
	}
}
