@page "/bookchapter/{Abrv}/{Chapter:int}/{Verse:int=1}/{ScriptureId:int=0}/"

@using MyHebrewBible.Client.State.BookChapter
@using MyHebrewBible.Client.Layout
@using MyHebrewBible.Client.Components.BibleLookup.Toolbar;
@using MyHebrewBible.Client.Features.BookChapter
@using BookChapterConstants = MyHebrewBible.Client.Features.BookChapter.Constants

@inject ILogger<Index>? Logger
@inject NavigationManager NavigationManager
@inject IToastService? Toast

<PageTitle>@PageTitle</PageTitle>

<div class="@GlobalEnums.MediaQuery.Xs.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Xs" />
</div>
<div class="@GlobalEnums.MediaQuery.Sm.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Sm" />
</div>
<div class="@GlobalEnums.MediaQuery.Md.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Md" />
</div>
<div class="@GlobalEnums.MediaQuery.Lg.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Lg" />
</div>
<div class="@GlobalEnums.MediaQuery.Xl.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Xl" />
</div>

<LoadingProgress>
	<div class="mt-5">
		@* <br /> *@
		@if (CurrentAbrvChapterVerse is not null && CurrentBookAndChapter is not null)
		{
			<ReportWrapper AbrvChapterVerse="CurrentAbrvChapterVerse"
										 BookAndChapter="CurrentBookAndChapter" />
		}
	</div>
</LoadingProgress>

@code {

	// Route parameters
	[Parameter, EditorRequired] public string Abrv { get; set; } = string.Empty;
	[Parameter, EditorRequired] public int Chapter { get; set; }
	[Parameter] public int Verse { get; set; } = 1;
	[Parameter] public int ScriptureId { get; set; }

	[CascadingParameter] public ProcessError? ProcessError { get; set; } // where is this used?
	[CascadingParameter] public CascadingAppState? CascadingAppState { get; set; }

	public BookAndChapter? CurrentBookAndChapter { get; set; }     // parameter for ReportWrapper
	public AbrvChapterVerse? CurrentAbrvChapterVerse { get; set; } // parameter for ReportWrapper

	protected string PageTitle = string.Empty;

	protected override void OnParametersSet()
	{
		//Logger!.LogInformation("{Method}, Route: {Abrv}/{Chapter}/{Verse}/{ScriptureId}", nameof(OnParametersSet), Abrv, Chapter, Verse, ScriptureId);
		try
		{
			if (Abrv == Constants.DefaultAbrv)
			{
				AbrvChapterVerse? rec = CascadingAppState!.AppState!.BookChapterState!.Get();
				NavigationManager!.NavigateTo($"{BookChapterConstants.BaseUrl}/{rec.Abrv}/{rec.Chapter}/{rec.Verse}/{rec.ScriptureId}");
			}
			else
			{
				//Logger!.LogInformation("{Method}, CallingMethod: {CallingMethod}", nameof(OnParametersSet), nameof(GetAbrvChapterVerseViaRoutes));
				var (abrvChapterVerse, bibleBook) = GetAbrvChapterVerseViaRoutes(Abrv, Chapter, Verse, ScriptureId);
				if (abrvChapterVerse is not null && bibleBook is not null)
				{
					CurrentAbrvChapterVerse = abrvChapterVerse;
					CurrentBookAndChapter = bibleBook;
					//Logger!.LogInformation("{Method}, CurrentAbrvChapterVerse: {CurrentAbrvChapterVerse}", nameof(OnParametersSet), CurrentAbrvChapterVerse);
				}
				else
				{
					Toast!.ShowWarning($"abrvChapterVerse and/or bibleBook is null (◡︵◡)");
				}
			}
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnParametersSet));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(Index)}!{nameof(OnParametersSet)}");
		}
	}

	// tuple used by ReportWrapper.
	private (AbrvChapterVerse?, BookAndChapter?) GetAbrvChapterVerseViaRoutes(string abrv, int chapter, int verse, int scriptureId)
	{
		//Logger!.LogInformation("{Method}, abrv/c/v/SID: {abrv}/{chapter}/{verse}/{scriptureId}"
		//, nameof(GetAbrvChapterVerseViaRoutes), abrv, chapter, verse, scriptureId);

		var (errMsg, _value) = GlobalEnums.BibleBookDictionary.GetId(abrv);

		if (String.IsNullOrEmpty(errMsg))
		{
			GlobalEnums.BibleBook? bibleBook;
			if (GlobalEnums.BibleBook.TryFromValue(_value, out bibleBook))
			{
				AbrvChapterVerse acv = new AbrvChapterVerse(bibleBook!.Abrv, chapter, verse, scriptureId); //
				return (acv, new BookAndChapter(bibleBook, chapter));
			}
		}
		else
		{
			Logger!.LogWarning("{Method}, {errMsg}", nameof(GetAbrvChapterVerseViaRoutes), errMsg);
			Toast!.ShowWarning(errMsg);
			//ToDo: change the url in the browser to the default book
			return (AbrvChapterVerse.Default, new BookAndChapter(GlobalEnums.BibleBook.Genesis, chapter));
		}
		return (null, null);
	}

	private async Task ReturnedAbrvChapterVerse(AbrvChapterVerse rec)
	{
		CurrentAbrvChapterVerse = rec;
		await CascadingAppState!.AppState!.BookChapterState!.Update(rec);
	}

	// Called by <NavbarBookChapter>
	private async Task ReturnedBookAndChapter(BookAndChapter bookAndChapter)
	{
		AbrvChapterVerse rec = new AbrvChapterVerse(bookAndChapter.BibleBook!.Abrv, bookAndChapter.Chapter, 1, 0);
		//Logger!.LogInformation("{Method}, AbrvChapterVerse: {AbrvChapterVerse}", nameof(ReturnedBookAndChapter), rec);
		NavigationManager!.NavigateTo($"{BookChapterConstants.BaseUrl}/{rec.Abrv}/{rec.Chapter}/{rec.Verse}/{rec.ScriptureId}");

		await CascadingAppState!.AppState!.BookChapterState!.Update(rec);
		CurrentBookAndChapter = bookAndChapter!;
		//Logger!.LogInformation("{Method}, CurrentBookAndChapter: {CurrentBookAndChapter}", nameof(ReturnedBookAndChapter), CurrentBookAndChapter);
		PageTitle = GlobalEnums.BibleBookFormat.BC(bookAndChapter);
	}
	// Ignore Spelling: bc, rec
}
