@page "/bookchapter"
@using MyHebrewBible.Client.Enums
@using MyHebrewBible.Client.Helpers
@using MyHebrewBible.Client.Features.BookChapter.Search
@using MyHebrewBible.Client.Features.BookChapter.PrevNext
@using MyHebrewBible.Client.Features.BookChapter.Verses
@using MyHebrewBible.Client.State

@* @inject ApiClient Api *@

@inject IBookChapterState bookChapterState

<PageTitle>Book Chapter</PageTitle>

 @* <IndexDebug Msg="@_msg" ReturnedBookAndChapterString="@ReturnedBookAndChapterString" Err="@_err" />  *@

<div class="@MediaQuery.Xs.DivClass">

	<Typeahead BookAndChapterTypeahead="@CurrentBookAndChapter"
						 MediaQuery="@MediaQuery.Xs"
						 OnBookAndChapterSelected="@ReturnedBookAndChapter" />
</div>
<div class="@MediaQuery.Sm.DivClass">
	<Typeahead BookAndChapterTypeahead="@CurrentBookAndChapter"
						 MediaQuery="@MediaQuery.Sm"
						 OnBookAndChapterSelected="@ReturnedBookAndChapter" />
</div>
<div class="@MediaQuery.Md.DivClass">
	<Typeahead BookAndChapterTypeahead="@CurrentBookAndChapter"
						 MediaQuery="@MediaQuery.Md"
						 OnBookAndChapterSelected="@ReturnedBookAndChapter" />
</div>
<div class="@MediaQuery.Lg.DivClass">
	<Typeahead BookAndChapterTypeahead="@CurrentBookAndChapter"
						 MediaQuery="@MediaQuery.Lg"
						 OnBookAndChapterSelected="@ReturnedBookAndChapter" />
</div>
<div class="@MediaQuery.Xl.DivClass">
	<Typeahead BookAndChapterTypeahead="@CurrentBookAndChapter"
						 MediaQuery="@MediaQuery.Xl"
						 OnBookAndChapterSelected="@ReturnedBookAndChapter" />
</div>


@if (CurrentBookAndChapter is not null)
{
	<div class="pb-n1 mt-2 mb-2 border-bottom border-info">
		<div class="d-flex justify-content-between mb-3">
			<div class="ps-2">
				<PreviousButton PreviousBookAndChapter="@CurrentBookAndChapter"
												buttonToShow="ButtonsToShow.PreviousOnly"
												OnBookAndChapterSelected="@ReturnedBookAndChapter" />
			</div>

			<div class="ps-2">
				<span class="fs-3">@CurrentBookAndChapter.BibleBook!.Title @CurrentBookAndChapter.Chapter </span>

				<PageInstructions />
			
			</div>


			<div class="pe-2">
				<NextButton NextBookAndChapter="@CurrentBookAndChapter"
										buttonToShow="ButtonsToShow.NextOnly"
										OnBookAndChapterSelected="@ReturnedBookAndChapter" />
			</div>
		</div>

	</div>
}

<Sections BookAndChapter="CurrentBookAndChapter" />

@code {

	protected string _err = string.Empty;
	protected string _msg = string.Empty;

	public BookAndChapter? CurrentBookAndChapter { get; set; }

	//protected override async Task OnInitializedAsync()
	protected override void OnInitialized()
	{
		//await SetBibleBookAndChapter();
		BibleBookIdAndChapter bibleBookIdAndChapter = bookChapterState.Get();
		CurrentBookAndChapter = new BookAndChapter(BibleBook.FromValue(bibleBookIdAndChapter.BibleBookId), bibleBookIdAndChapter.Chapter);
	}

	protected string? ReturnedBookAndChapterString;

	private void ReturnedBookAndChapter(BookAndChapter bookAndChapter)  //async Task
	{
		ReturnedBookAndChapterString = bookAndChapter.ToString();
		CurrentBookAndChapter = bookAndChapter!;
		bookChapterState.Update(new BibleBookIdAndChapter(CurrentBookAndChapter.BibleBook!.Value, CurrentBookAndChapter.Chapter));
	}

}
