@page "/bookchapter"
@using MyHebrewBible.Client.Enums
@using MyHebrewBible.Client.Helpers
@using MyHebrewBible.Client.Features.BookChapter.Search
@using MyHebrewBible.Client.Features.BookChapter.PrevNext

@inject ApiClient Api

<PageTitle>Book Chapter</PageTitle>

<nav class="navbar navbar-light bg-light">
	<div class="container-fluid">

		<div class="@MediaQuery.Xs.DivClass">
			<TypeaheadEditForm BibleBook="@CurrentBibleBook" Chapter="@CurrentChapter" MediaQuery="@MediaQuery.Xs" OnBookAndChapterSelected="@ReturnedBookAndChapter" />
		</div>
		<div class="@MediaQuery.Sm.DivClass">
			<TypeaheadEditForm BibleBook="@CurrentBibleBook" Chapter="@CurrentChapter" MediaQuery="@MediaQuery.Sm" OnBookAndChapterSelected="@ReturnedBookAndChapter" />
		</div>
		<div class="@MediaQuery.Md.DivClass">
			<TypeaheadEditForm BibleBook="@CurrentBibleBook" Chapter="@CurrentChapter" MediaQuery="@MediaQuery.Md" OnBookAndChapterSelected="@ReturnedBookAndChapter" />
		</div>
		<div class="@MediaQuery.Lg.DivClass">
			<TypeaheadEditForm BibleBook="@CurrentBibleBook" Chapter="@CurrentChapter" MediaQuery="@MediaQuery.Lg" OnBookAndChapterSelected="@ReturnedBookAndChapter" />
		</div>
		<div class="@MediaQuery.Xl.DivClass">
			<TypeaheadEditForm BibleBook="@CurrentBibleBook" Chapter="@CurrentChapter" MediaQuery="@MediaQuery.Xl" OnBookAndChapterSelected="@ReturnedBookAndChapter" />
		</div>

	</div>
</nav>

@* @if (ReturnedBookAndChapterFromTypeaheadEditForm is not null)
{
	<p>@($"ReturnedBookAndChapterFromTypeaheadEditForm: {ReturnedBookAndChapterFromTypeaheadEditForm}")</p>
} *@

<div class="pb-n1 mt-2 mb-2 border-bottom border-info">

	<div class="d-flex justify-content-between mb-3">
		<div class="ps-2">
			@if (CurrentPrevNextButtonVM is not null)
			{
				<PrevNextButton PrevNextButtonVM="@CurrentPrevNextButtonVM"
												buttonToShow="ButtonsToShow.PreviousOnly"
												OnBookChapterSelected="@ReturnedBookChapterPrevNext" />
				@*         OnBookAndChapterSelected = "@ReturnedBookAndChapter" /> *@
			}
		</div>

		<div class="pe-2">
			@if (CurrentPrevNextButtonVM is not null)
			{
				<PrevNextButton PrevNextButtonVM="@CurrentPrevNextButtonVM"
												buttonToShow="ButtonsToShow.NextOnly"
												OnBookChapterSelected="@ReturnedBookChapterPrevNext" />
			}

		</div>
	</div>

	@* <h5 class="text-center">Book Chapter</h5> *@

</div>


@if (verses == null)
{
	<p>🤔</p>
}
else
{
	@foreach (var item in verses)
	{
		@*
		@if (item.DescH.GetType() != typeof(DBNull))
		{
			<h3 class="mt-2">@item.DescH</h3>
		}
		else
		{
			<small>why for how come you know have a pin</small>
		} *@

		@*
		@if (item.DescH != null)
		{
			<h3 class="mt-2">@item.DescH</h3>
		}
		*@

		@* 		@if (item.DescD is not null)
		{
			<h5 class="text-end mt-3 mb-1 text-black-50 fst-italic">@item.DescD</h5>
		}
*@

		<p class="fs-5">
			<a title="@item.BCV" href="https://www.blueletterbible.org/kjv/gen/1/1/" target="_blank"><sup class="btn btn-outline-primary py-0 px-1"><b>@item.Verse</b></sup></a>  @((MarkupString)@item.KJV!)
		</p>

	}
}

@code {
	public BookAndChapter? CurrentBookAndChapter { get; set; }
	public BibleBook? CurrentBibleBook { get; set; }
	public int CurrentChapter { get; set; }

	protected override async Task OnInitializedAsync()
	{
		SetBibleBookAndChapter();
		//SetSubTitle(null);
		//ShowSearch = true;

		//int c = CurrentChapter ?? 1;
		// 
		//CurrentPrevNextButtonVM = new PrevNextButtonVM(CurrentBibleBook!, CurrentChapter);  // , c
		CurrentPrevNextButtonVM = new PrevNextButtonVM(CurrentBookAndChapter!);  
		verses = await Api!.GetBookChapterAsync(CurrentBibleBook!, CurrentChapter);  
	}

	protected void SetBibleBookAndChapter()
	{
		//ToDo: finish LocalStorage solution

		bool GottenFromLocalStorage = false;
		if (GottenFromLocalStorage)
		{
			CurrentBibleBook = BibleBook.Genesis;
			CurrentChapter = 2;
			CurrentBookAndChapter = new BookAndChapter(CurrentBibleBook, CurrentChapter);
		}
		else
		{
			CurrentBibleBook = BibleBook.Genesis;
			CurrentChapter = 2;
			CurrentBookAndChapter = new BookAndChapter(CurrentBibleBook, CurrentChapter);
		}
	}

	//ToDo: do I need this SubTitle, currently it's not being used
	// protected string SubTitle = "";
	// protected void SetSubTitle(string? TitleOverRide)
	// {
	// 	if (TitleOverRide is not null)
	// 	{
	// 		SubTitle = TitleOverRide;
	// 	}
	// 	else
	// 	{
	// 		/*
	// 		if (CurrentChapter is not null)
	// 		{
	// 			SubTitle = $"{CurrentBibleBook!.Title} {CurrentChapter}";
	// 		}
	// 		else
	// 		{
	// 			SubTitle = $"{CurrentBibleBook!.Title}";
	// 		}
	// 		*/
	// 		SubTitle = $"{CurrentBibleBook!.Title} {CurrentChapter}";
	// 	}
	// }

	private ICollection<BookChapter>? verses = null;
	public PrevNextButtonVM? CurrentPrevNextButtonVM { get; set; }

	public BibleBook? PrevBibleBook { get; set; }

	protected string? ReturnedBookAndChapterFromTypeaheadEditForm;
	private async Task ReturnedBookAndChapter(BookAndChapter bookAndChapter)
	{
		ReturnedBookAndChapterFromTypeaheadEditForm = bookAndChapter.ToString();
		PrevBibleBook = CurrentBibleBook;
		CurrentBibleBook = bookAndChapter.BibleBook;
		CurrentChapter = bookAndChapter.Chapter;
		CurrentBookAndChapter = new BookAndChapter(CurrentBibleBook, CurrentChapter);

		//CurrentPrevNextButtonVM = new PrevNextButtonVM(bookAndChapter.BibleBook!, 1);
		//verses = null;

		//CurrentPrevNextButtonVM = new PrevNextButtonVM(bookAndChapter.BibleBook!, bookAndChapter.Chapter);
		CurrentPrevNextButtonVM = new PrevNextButtonVM(bookAndChapter!);
		long b = bookAndChapter.BibleBook!.Value;
		long c = bookAndChapter.Chapter;
		//verses = await Api!.GetBookChapterAsync(bookAndChapter.BibleBook, bookAndChapter.Chapter);
		verses = await Api!.GetBookChapterAsync(b, c);
	}



	private async Task ReturnedBookChapterPrevNext(BookChapterPrevNext bookChapterPrevNext)
	{
		//CurrentPrevNextButtonVM = new PrevNextButtonVM(bookChapterPrevNext.BibleBook!, bookChapterPrevNext.Chapter);

		var bookAndChapter = new BookAndChapter(bookChapterPrevNext.BookAndChapter!.BibleBook, bookChapterPrevNext.BookAndChapter.Chapter);
		CurrentPrevNextButtonVM = new PrevNextButtonVM(bookAndChapter!);

		CurrentBookAndChapter = new BookAndChapter(CurrentBibleBook, CurrentChapter);


		// Why in the HELL does this not work!!! I THINK BECUASE it need Long and not Int
		//verses = await Api!.GetBookChapterAsync(bookChapterPrevNext.BibleBook!.Value, chapter);

		/*
		string t = bookChapterPrevNext.BibleBook!.Title;
		int b = bookChapterPrevNext.BibleBook!.Value;
		int c = bookChapterPrevNext.Chapter;

		string t = CurrentBookAndChapter.BibleBook!.Title;
		int b = CurrentBookAndChapter.BibleBook!.Value;
		int c = CurrentBookAndChapter.Chapter;

		*/

		int b = bookAndChapter.BibleBook!.Value;
		int c = bookAndChapter.Chapter;

		//SubTitle = ;
		//SetSubTitle($"{t} {c}");

		verses = await Api!.GetBookChapterAsync(b, c);
	}

	//ToDo: review, not being used
	// private bool ShowSearch;
	// private void ReturnedSearchToggle(bool showSearch)
	// {
	// 	ShowSearch = showSearch;
	// }

}
