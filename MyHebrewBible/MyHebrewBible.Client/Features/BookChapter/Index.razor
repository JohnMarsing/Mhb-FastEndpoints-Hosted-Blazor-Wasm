@page "/bookchapter/{Abrv}/{Chapter:int}/{Verse:int=1}/{ScriptureId:int=0}/"

@using MyHebrewBible.Client.State.BookChapter
@using MyHebrewBible.Client.Layout
@using MyHebrewBible.Client.Components.BibleLookup.Toolbar;
@using MyHebrewBible.Client.Features.BookChapter
@using BookChapterConstants = MyHebrewBible.Client.Features.BookChapter.Constants

@inject ILogger<Index>? Logger
@inject NavigationManager NavigationManager
@inject IToastService? Toast

<PageTitle>@PageTitle</PageTitle>

<div class="@GlobalEnums.MediaQuery.Xs.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Xs" />
</div>
<div class="@GlobalEnums.MediaQuery.Sm.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Sm" />
</div>
<div class="@GlobalEnums.MediaQuery.Md.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Md" />
</div>
<div class="@GlobalEnums.MediaQuery.Lg.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Lg" />
</div>
<div class="@GlobalEnums.MediaQuery.Xl.DivClass">
	<NavbarBookChapter CurrentBookAndChapter="CurrentBookAndChapter"
										 OnBookAndChapterSelected="ReturnedBookAndChapter"
										 MediaQuery="GlobalEnums.MediaQuery.Xl" />
</div>

<LoadingProgress>
	<div class="mt-5">
		<br />
		@if (CurrentAbrvChapterVerse is not null && CurrentBookAndChapter is not null)
		{
			<ReportWrapper AbrvChapterVerse="CurrentAbrvChapterVerse"
										 BookAndChapter="CurrentBookAndChapter" />
		}
	</div>
</LoadingProgress>

@code {

	// Route parameters
	[Parameter, EditorRequired] public string Abrv { get; set; } = string.Empty;
	[Parameter, EditorRequired] public int Chapter { get; set; }
	[Parameter] public int Verse { get; set; } = 1;
	[Parameter] public int ScriptureId { get; set; }

	[CascadingParameter] public ProcessError? ProcessError { get; set; } // where is this used?
	[CascadingParameter] public CascadingAppState? CascadingAppState { get; set; }

	public BookAndChapter? CurrentBookAndChapter { get; set; }
	public AbrvChapterVerse? CurrentAbrvChapterVerse { get; set; }

	protected string PageTitle = string.Empty;

	protected override void OnParametersSet()
	{
		//Logger!.LogInformation("{Method}, Route: {Abrv}/{Chapter}/{Verse}/{ScriptureId}"
		//	, nameof(OnParametersSet), Abrv, Chapter, Verse, ScriptureId);

		if (Abrv == Constants.DefaultAbrv)
		{
			//Logger!.LogInformation("{Method}, CallingMethod: {CallingMethod}", nameof(OnParametersSet), nameof(ReNavigateBackToThisPage));
			ReNavigateBackToThisPage();
		}
		else
		{
			//Logger!.LogInformation("{Method}, CallingMethod: {CallingMethod}", nameof(OnParametersSet), nameof(GetAbrvChapterVerseViaRoutes));
			var (abrvChapterVerse, bibleBook) = GetAbrvChapterVerseViaRoutes(Abrv, Chapter, Verse, ScriptureId);

			// These two properties are set and is the parameters that are passed to ReportWrapper;
			CurrentAbrvChapterVerse = abrvChapterVerse;
			CurrentBookAndChapter = bibleBook;
		}
	}

	/*
	Book abrv and Chapter are unknown (like from Home!FancyFatNavButton therefore,
	1. Get `AbrvChapterVerse rec` found in local storage (State)
	2. Then navigate back to BC via `NavigationManager` passing in `AbrvChapterVerse rec`
	*/
	private void ReNavigateBackToThisPage()
	{
		AbrvChapterVerse? rec = CascadingAppState!.AppState!.BookChapterState!.Get();
		if (rec is null)
		{
			// Note: I don't know why this should ever happen
			Logger!.LogWarning("{Method}, rec is null, how is this possible ???", nameof(ReNavigateBackToThisPage));
			Toast!.ShowWarning($"rec is null, AbrvChapterVerse not found");
		}
		else
		{
			//Logger!.LogInformation("{Method}, AbrvChapterVerse: {AbrvChapterVerse}", nameof(ReNavigateBackToThisPage), rec);
			NavigationManager!.NavigateTo($"{BookChapterConstants.BaseUrl}/{rec.Abrv}/{rec.Chapter}/{rec.Verse}/{rec.ScriptureId}");
		}
	}

	// tuple used by ReportWrapper.
	private (AbrvChapterVerse, BookAndChapter) GetAbrvChapterVerseViaRoutes(string abrv, int chapter, int verse, int scriptureId)
	{
		//Logger!.LogInformation("{Method}, abrv/c/v/SID: {abrv}/{chapter}/{verse}/{scriptureId}"
		//, nameof(GetAbrvChapterVerseViaRoutes), abrv, chapter, verse, scriptureId);
		GlobalEnums.BibleBook? bibleBook;
		if (GlobalEnums.BibleBook.TryFromName(abrv, out bibleBook))
		{
			AbrvChapterVerse acv = new AbrvChapterVerse(bibleBook!.Abrv, chapter, verse, scriptureId); //
			return (acv, new BookAndChapter(bibleBook, chapter));
		}
		else
		{
			Logger!.LogWarning("{Method}, TryFromName failed, using default; Abrv: {abrv}", nameof(GetAbrvChapterVerseViaRoutes), abrv);
			Toast!.ShowWarning($"CurrentAbrvChapterVerse is null using default");
			return (AbrvChapterVerse.Default, new BookAndChapter(GlobalEnums.BibleBook.Genesis, chapter));
		}
	}

	// Called by <NavbarBookChapter>
	private async Task ReturnedBookAndChapter(BookAndChapter bookAndChapter)
	{
		AbrvChapterVerse rec = new AbrvChapterVerse(bookAndChapter.BibleBook!.Abrv, bookAndChapter.Chapter, 1, 0);
		//Logger!.LogInformation("{Method}, AbrvChapterVerse: {AbrvChapterVerse}", nameof(ReturnedBookAndChapter), rec);
		NavigationManager!.NavigateTo($"{BookChapterConstants.BaseUrl}/{rec.Abrv}/{rec.Chapter}/{rec.Verse}/{rec.ScriptureId}");

		await CascadingAppState!.AppState!.BookChapterState!.Update(rec);
		CurrentBookAndChapter = bookAndChapter!;
		//Logger!.LogInformation("{Method}, CurrentBookAndChapter: {CurrentBookAndChapter}", nameof(ReturnedBookAndChapter), CurrentBookAndChapter);
		PageTitle = GlobalEnums.BibleBookFormat.BC(bookAndChapter);
	}
	// Ignore Spelling: bc, rec
}
