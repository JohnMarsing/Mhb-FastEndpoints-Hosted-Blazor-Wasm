@using MyHebrewBible.Client.Enums

@if (buttonToShow == ButtonsToShow.Both | buttonToShow == ButtonsToShow.PreviousOnly)
{
	@if (@VM!.PrevBibleBook!.ThereIsNone == false)
	{
		<button type="button" class="btn btn-outline-primary"
						@onclick="@(e => ButtonClick(VM.PrevBibleBook.BookAndChapter!))">
			<sup>
				@VM!.PrevBibleBook!.ButtonText&nbsp;
			</sup><i class="@VM!.PrevBibleBook.Icon"></i>
			@* <br /><small>Prev</small> *@
		</button>
	}
	else
	{
		<OnEdgeButton />
	}
}

@if (buttonToShow == ButtonsToShow.Both | buttonToShow == ButtonsToShow.NextOnly)
{
	@if (@VM!.NextBibleBook!.ThereIsNone == false)
	{
		<button type="button" class="btn btn-outline-primary"
						@onclick="@(e => ButtonClick(VM.NextBibleBook.BookAndChapter!))">
			<i class="@VM!.NextBibleBook.Icon"></i>&nbsp;
			<sup>@VM!.NextBibleBook.ButtonText</sup>
			@* <br /><small>Next</small> *@
		</button>
	}
	else
	{
		<OnEdgeButton />
	}
}

@code {

	[Parameter, EditorRequired] public PrevNextButtonVM? PrevNextButtonVM { get; set; }
	[Parameter, EditorRequired] public ButtonsToShow buttonToShow { get; set; }
	[Parameter] public EventCallback<BookAndChapter> OnBookAndChapterSelected { get; set; }

	private void ButtonClick(BookAndChapter bookAndChapter)
	{
		OnBookAndChapterSelected.InvokeAsync(bookAndChapter);
	}

	protected PrevNextButtonVM? VM { get; set; }

	protected override void OnParametersSet()
	{
		VM = PrevNextButtonVM;
	}

}
