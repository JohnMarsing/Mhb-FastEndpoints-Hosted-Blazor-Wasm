@using MyHebrewBible.Client.Enums
@using MyHebrewBible.Client.Layout

@* [Flex | Grow and shrink](https://getbootstrap.com/docs/5.3/utilities/flex/#grow-and-shrink) *@
@* [Flex | Auto margins](https://getbootstrap.com/docs/5.3/utilities/flex/#auto-margins) *@


@* <TypeaheadDebug Msg="@_msg" BibleBookGottenFromParent="@BibleBookGottenFromParent" SelectedBook="@SelectedBook" /> *@

<div class="d-flex mb-3">
	<div class="me-auto p-2">

		<BlazoredTypeahead SearchMethod="SearchBibleBooks"
											 TValue="BibleBook"
											 TItem="BibleBook"
											 Value="SelectedBook"
											 ValueChanged="SelectedResultChanged"
											 ValueExpression="@(() => SelectedBook)"
											 EnableDropDown="true"
											 MaximumSuggestions="66"
											 MinimumLength="1"
											 placeholder="Search bible...">
			<SelectedTemplate Context="mycontext">
				@if (MediaQuery == MediaQuery.Xs)
				{
					@mycontext!.Title
				}
				else
				{
					<span>@mycontext!.Title</span> <text>&nbsp;&nbsp;&nbsp;</text>
					<span class="hebrew">@mycontext.NameInHebrew</span>
				}
			</SelectedTemplate>
			<HelpTemplate>
				Please enter at least 1 characters to perform a search.
			</HelpTemplate>
			<ResultTemplate Context="mycontext">
				@if (MediaQuery == MediaQuery.Xs)
				{
					@mycontext!.Title
				}
				else
				{
					<div class="d-flex justify-content-between">
						@mycontext!.Title <span class="hebrew">@mycontext.NameInHebrew</span>
					</div>
				}
			</ResultTemplate>
		</BlazoredTypeahead>
	</div>

	<div class="p-1">
		<HomeButton />
	</div>

	<div class="p-1">
		<SitemapButton />
	</div>

	<div class="p-1">
		<a href="/" class="btn btn-primary" title="Customize book chapter settings">
			<i class="fas fa-cog"></i>
		</a>
	</div>

</div>

@if (ShowChapterButtons)
{
	@if (BibleBookGottenFromParent != null)
	{
		<div class="d-flex mt-3">
			<ChapterButtons CurrentBibleBook="@BibleBookGottenFromParent"
											ButtonsPerRow="ButtonsPerRow"
											OnChapterFilterSelected="OnChapterSelected" />
		</div>
	}
}

@code {
	[Parameter, EditorRequired] public BookAndChapter? BookAndChapterTypeahead { get; set; }
	[Parameter, EditorRequired] public MediaQuery? MediaQuery { get; set; }
	[Parameter] public EventCallback<BookAndChapter> OnBookAndChapterSelected { get; set; }

	public BibleBook? BibleBookGottenFromParent { get; set; }
	protected int ButtonsPerRow;
	protected bool ShowChapterButtons = false; // true;
	protected BibleBook? SelectedBook { get; set; }

	protected string _msg = string.Empty;

	protected override void OnParametersSet()
	{
		if (BookAndChapterTypeahead is not null && BookAndChapterTypeahead.BibleBook is not null)
		{
			_msg = $"Inside {nameof(OnParametersSet)}, setting BibleBookGottenFromParent and SelectedBook";
			BibleBookGottenFromParent = BookAndChapterTypeahead!.BibleBook; /*Object reference not set to an instance of an object.*/
			SelectedBook = BookAndChapterTypeahead!.BibleBook;
		}
		if (MediaQuery is not null) { SetMediaQuery(); }
	}

	private void SetMediaQuery()
	{
		MediaQuery!
		.When(MediaQuery.Xs).Then(() => ButtonsPerRow = 5)
		.When(MediaQuery.Sm).Then(() => ButtonsPerRow = 10)
		.When(MediaQuery.Md).Then(() => ButtonsPerRow = 15)
		.When(MediaQuery.Lg).Then(() => ButtonsPerRow = 20)
		.When(MediaQuery.Xl).Then(() => ButtonsPerRow = 25);

	}

	protected string? ReturnedBookAndChapterFromChapterButtons;
	private void OnChapterSelected(BookAndChapter bookAndChapter)
	{
		ShowChapterButtons = false;
		ReturnedBookAndChapterFromChapterButtons = bookAndChapter.ToString();
		OnBookAndChapterSelected.InvokeAsync(bookAndChapter);
	}

	private async Task<IEnumerable<BibleBook>> SearchBibleBooks(string searchText)
	{
		return await Task.FromResult(BibleBook.List
			.Where(x => x.Title.ToLower().Contains(searchText.ToLower()))
			.OrderBy(o => o.Value));
	}

	private void SelectedResultChanged(BibleBook result)
	{
		ShowChapterButtons = true;
		SelectedBook = result;
	}
}
