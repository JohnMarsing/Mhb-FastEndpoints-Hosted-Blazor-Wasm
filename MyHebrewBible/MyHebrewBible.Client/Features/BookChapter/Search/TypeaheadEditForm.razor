@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using System.ComponentModel.DataAnnotations
@using MyHebrewBible.Client.Enums

@if (SelectedBibleBook != BibleBook.Psalms)
{
	<EditForm class="d-flex" Model="VM" OnValidSubmit="HandleFormSubmit">

		<BlazoredTypeahead SearchMethod="SearchBibleBooks"
											 @bind-Value="VM!.SelectedBook"
											 EnableDropDown="true"
											 MaximumSuggestions="66"
											 MinimumLength="1"
											 placeholder="Search bible...">
			<SelectedTemplate Context="mycontext">
				@mycontext!.Title &nbsp;&nbsp;&nbsp; <span class="hebrew">@mycontext.NameInHebrew</span>
			</SelectedTemplate>
			<HelpTemplate>
				Please enter at least 1 characters to perform a search.
			</HelpTemplate>
			<ResultTemplate Context="mycontext">
				@mycontext.Title &nbsp;&nbsp;&nbsp; <i>@mycontext.TransliterationInHebrew</i>
			</ResultTemplate>
		</BlazoredTypeahead>

		<ValidationMessage For="@(() => VM.SelectedBook)" />

		<button class="btn btn-outline-primary btn-sm ms-1 me-2"
						type="submit">
			Chapter <i class="fas fa-search"></i>
		</button>

	</EditForm>
}
else
{
	<EditForm Model="@VMPsalms"
						OnValidSubmit="HandleValidSubmitPsalms"
						class="card card-body bg-light m-1">
		<DataAnnotationsValidator />

		<div class="d-flex justify-content-between mb-3">

			<BlazoredTypeahead SearchMethod="SearchBibleBooks"
												 @bind-Value="VMPsalms!.SelectedBook"
												 EnableDropDown="true"
												 MaximumSuggestions="66"
												 MinimumLength="1"
												 placeholder="Search bible...">
				<SelectedTemplate Context="mycontext">
					@mycontext!.Title &nbsp;&nbsp;&nbsp; <span class="hebrew">@mycontext.NameInHebrew</span>
				</SelectedTemplate>
				<HelpTemplate>
					Please enter at least 1 characters to perform a search.
				</HelpTemplate>
				<ResultTemplate Context="mycontext">
					@mycontext.Title &nbsp;&nbsp;&nbsp; <i>@mycontext.TransliterationInHebrew</i>
				</ResultTemplate>
			</BlazoredTypeahead>

			<InputNumber id="chapter" class="form-control" placeholder="Chapter" @bind-Value="VMPsalms!.Chapter" />
			<ValidationMessage For="@(() => VMPsalms.Chapter)" />

			<button type="submit" class="btn btn-outline-primary btn-sm">
				Submit
			</button>

		</div>
	</EditForm>
}

@if (SelectedBibleBook != null)
{
	@if (SelectedBibleBook != BibleBook.Psalms)
	{
		<div class="row pt-2 pb-1 d-print-none">
			<div class="col-12">
				<ChapterButtons CurrentBibleBook="@BibleBook" ButtonsPerRow="ButtonsPerRow" OnChapterFilterSelected="OnChapterSelected" />
			</div>
		</div>
	}
}

@code {

	private TypeaheadVM? VM;
	private TypeaheadAndChapterVM? VMPsalms;

	[Parameter, EditorRequired] public BibleBook? BibleBook { get; set; }
	[Parameter, EditorRequired] public MediaQuery? MediaQuery { get; set; }
	[Parameter] public int Chapter { get; set; }

	[Parameter] public EventCallback<BookAndChapter> OnBookAndChapterSelected { get; set; }

	public int SelectedChapter { get; set; }
	public BibleBook? SelectedBibleBook { get; set; }

	protected int ButtonsPerRow;
	protected override void OnInitialized()
	{
		MediaQuery!
			.When(MediaQuery.Xs).Then(() => ButtonsPerRow = 5)
			.When(MediaQuery.Sm).Then(() => ButtonsPerRow = 10)
			.When(MediaQuery.Md).Then(() => ButtonsPerRow = 15)
			.When(MediaQuery.Lg).Then(() => ButtonsPerRow = 20)
			.When(MediaQuery.Xl).Then(() => ButtonsPerRow = 25);
	}

	protected override void OnParametersSet()
	{
		VM = new TypeaheadVM();
		VM.SelectedBook = BibleBook;
		VMPsalms = new TypeaheadAndChapterVM();
		VMPsalms = new TypeaheadAndChapterVM() { SelectedBook = BibleBook.Psalms, Chapter = Chapter };
	}


	protected string? ReturnedBookAndChapterFromChapterButtons;
	private void OnChapterSelected(BookAndChapter bookAndChapter)
	{
		ReturnedBookAndChapterFromChapterButtons = bookAndChapter.ToString();
		OnBookAndChapterSelected.InvokeAsync(bookAndChapter);
	}

	private async Task<IEnumerable<Enums.BibleBook>> SearchBibleBooks(string searchText)
	{
		return await Task.FromResult(Enums.BibleBook.List
			.Where(x => x.Title.ToLower().Contains(searchText.ToLower()))
			.OrderBy(o => o.Value));
	}

	protected string? SelectedBibleBookString;

	protected BookAndChapter? bookAndChapter;
	private void HandleFormSubmit()
	{
		SelectedBibleBook = VM!.SelectedBook;
		SelectedBibleBookString = VM!.SelectedBook!.Name;
		SelectedChapter = 1;
		bookAndChapter = new BookAndChapter(VM!.SelectedBook, SelectedChapter);
		OnBookAndChapterSelected.InvokeAsync(bookAndChapter);
	}


	private void HandleValidSubmitPsalms()
	{
		SelectedBibleBook = VMPsalms!.SelectedBook;
		SelectedBibleBookString = VMPsalms!.SelectedBook!.Name;
		SelectedChapter = VMPsalms!.Chapter;
		bookAndChapter = new BookAndChapter(VMPsalms!.SelectedBook, VMPsalms!.Chapter);
		OnBookAndChapterSelected.InvokeAsync(bookAndChapter);
	}

}
