@inject ApiClient Api
@inject ILogger<Sections>? Logger
@inject IToastService? Toast

<LoadingComponent IsLoading="verses==null" TurnSpinnerOff="TurnSpinnerOff">
	@foreach (var item in verses!)
	{
		@if (item.DescH != "NULL")
		{
			@* ToDo: Still having problems syncing the navbar, title etc. with the actual chapter being shown; maybe only during slow internet connection  *@
			<p class="text-black-50 text-center " style="font-size:11px; margin-top: -1rem !important; margin-bottom: -.05rem !important;">@item.BCV</p>

			<p class="text-danger text-center fs-4 mt-1 mb-2">
				@item.DescH
			</p>
		}

		@if (item.DescD != "NULL")
		{
			<p class="text-secondary fs-6 text-end mb-0"><em>@item.DescD</em></p>
		}

		if (FocusScriptureId == 0)
		{
			<ParagraphKjv BibleVerseWithAT="item">
				<ParagraphEnd>
					@*<AppendixSAT VerseNumber="item.Verse" SatVerseList="SatVerseList" />*@
					@if (BookAndChapter!.BibleBook!.IsHebrewBible)
					{
						<AppendixDrillDownButton ScriptureId="item.ID" VerseNumber="item.Verse"
																		 OnVerseSelected="ReturnedVerse" />
					}
					<sup>
						<BibleAnchor BookAndChapter="BookAndChapter" IconOnly="true" ScriptureId="item.ID" Verse="item.Verse" />
					</sup>
				</ParagraphEnd>
			</ParagraphKjv>
	    @if (item.WordPartList.Count() >0)
			{
				<ParagraphSAT SurroundingWords="item.WordPartList.ToList()" />
			}
		}
		else
		{
			if (item.ID == FocusScriptureId)
			{
				<div class="card border-primary mt-2 mb-4">
					<div class="card-header">
						<HeaderKjvWordPart BibleVerseWithAT="item" BookAndChapter="BookAndChapter"
															 VerseNumber="item.Verse"
															 OnClose="ReturnedCloseEvent" />
					</div>
					<div class="card-body">
						<ParagraphKjvWordPart ScriptureId="FocusScriptureId"
																	OnStrongsSelected="ReturnedStrongs" />
					</div>
					<HebrewTable ScriptureId="FocusScriptureId"
											 StrongsAndWordCount="CurrentStrongsAndWordCount"
											 OnStrongsSelected="ReturnedStrongs" />
				</div>
			}
			else
			{
				<ParagraphKjv BibleVerseWithAT="item">
					<ParagraphEnd>
						@* <AppendixSAT VerseNumber="item.Verse" SatVerseList="SatVerseList" /> *@
						<AppendixDrillDownButton ScriptureId="item.ID" VerseNumber="item.Verse"
																		 OnVerseSelected="ReturnedVerse" />
						<sup>
							<BibleAnchor BookAndChapter="BookAndChapter" IconOnly="true" ScriptureId="item.ID" Verse="item.Verse" />
						</sup>
					</ParagraphEnd>
				</ParagraphKjv>
			}
		}
	}
</LoadingComponent>

@code {
	[Parameter, EditorRequired] public BookAndChapter? BookAndChapter { get; set; }

	protected long FocusScriptureId;
	protected long VerseNumber;
	protected bool TurnSpinnerOff = false;

	private ICollection<BibleVerseWithAT>? verses = null;

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			//Logger!.LogInformation("{Method}, BookAndChapter: {BookAndChapter}", nameof(OnParametersSetAsync), BookAndChapter);
			FocusScriptureId = 0;
			if (BookAndChapter is not null && BookAndChapter!.BibleBook is not null)
			{
				verses = await Api!.GetBookChapterWithATAsync((long)BookAndChapter!.BibleBook, (long)BookAndChapter.Chapter);
			}
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnParametersSetAsync));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(Sections)}!{nameof(OnParametersSetAsync)}");
		}
		finally
		{
			TurnSpinnerOff = true;
		}
	}

	private void ReturnedVerse(ScriptureIdAndVerseNumber scriptureIdAndVerseNumber)
	{
		FocusScriptureId = scriptureIdAndVerseNumber.ScriptureID;
		VerseNumber = scriptureIdAndVerseNumber.VerseNumber;
	}

	StrongsAndWordCount? CurrentStrongsAndWordCount = new StrongsAndWordCount(0, 0);
	private void ReturnedStrongs(StrongsAndWordCount strongsAndWordCount)
	{
		CurrentStrongsAndWordCount = strongsAndWordCount;
	}

	private void ReturnedCloseEvent()
	{
		FocusScriptureId = 0;
	}
}
