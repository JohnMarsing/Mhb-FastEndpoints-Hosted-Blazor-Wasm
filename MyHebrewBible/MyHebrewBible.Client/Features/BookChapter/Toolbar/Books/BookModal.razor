@using MyHebrewBible.Client.Enums

<BookModalTemplate BookTitle="@CurrentBookAndChapter!.BibleBook!.Title">

	<ChildHeaderContent>
		<p>Select a Book</p>
	</ChildHeaderContent>

	<ChildBodyContent>
		<BlazoredTypeahead SearchMethod="SearchBibleBooks"
											 TValue="BibleBook"
											 TItem="BibleBook"
											 Value="SelectedBook"
											 ValueChanged="SelectedResultChanged"
											 ValueExpression="@(() => SelectedBook)"
											 EnableDropDown="true"
											 MaximumSuggestions="66"
											 MinimumLength="1"
											 placeholder="Search bible...">
			<SelectedTemplate Context="mycontext">
				@if (MediaQuery == MediaQuery.Xs)
				{
					@mycontext!.Title
				}
				else
				{
					<span>@mycontext!.Title</span> <text>&nbsp;&nbsp;&nbsp;</text>
					<span class="hebrew">@mycontext.NameInHebrew</span>
				}
			</SelectedTemplate>
			<HelpTemplate>
				Please enter at least 1 characters to perform a search.
			</HelpTemplate>
			<ResultTemplate Context="mycontext">
				@if (MediaQuery == MediaQuery.Xs)
				{
					@mycontext!.Title
				}
				else
				{
					<div class="d-flex justify-content-between">
						@mycontext!.Title <span class="hebrew">@mycontext.NameInHebrew</span>
					</div>
				}
			</ResultTemplate>
		</BlazoredTypeahead>

	</ChildBodyContent>

</BookModalTemplate>

@code {
	[Parameter, EditorRequired] public BookAndChapter? CurrentBookAndChapter { get; set; }
	[Parameter, EditorRequired] public MediaQuery? MediaQuery { get; set; }
	[Parameter] public EventCallback<BibleBook> OnBookSelected { get; set; }

	protected BibleBook? SelectedBook { get; set; }

	protected override void OnParametersSet()
	{
		if (CurrentBookAndChapter is not null && CurrentBookAndChapter.BibleBook is not null)
		{
			SelectedBook = CurrentBookAndChapter!.BibleBook;
		}
	}

	private async Task<IEnumerable<BibleBook>> SearchBibleBooks(string searchText)
	{
		return await Task.FromResult(BibleBook.List
			.Where(x => x.Title.ToLower().Contains(searchText.ToLower()))
			.OrderBy(o => o.Value));
	}

	private void SelectedResultChanged(BibleBook? bibleBook)
	{
		/* If the user clicks the X button in the BlazoredTypeahead control, bibleBook will be null */
		if (bibleBook is not null)
		{
			SelectedBook = bibleBook;
			OnBookSelected.InvokeAsync(bibleBook);
		}
	}

}
