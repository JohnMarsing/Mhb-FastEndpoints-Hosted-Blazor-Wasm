@using MyHebrewBible.Client.Layout
@using MyHebrewBible.Client.Features.BookChapter.Toolbar.PrevNext
@using MyHebrewBible.Client.Features.BookChapter.Toolbar.NumberPad
@* @using MyHebrewBible.Client.Components *@

@inject ILogger<Navbar>? Logger

<nav class="navbar navbar-expand bg-primary-subtle fixed-top">
	<div class="collapse navbar-collapse justify-content-start">
		<div class="ps-1"><HomeButton /></div>
	</div>

	@if (CurrentBookAndChapter is null)
	{
		<text><span class="text-center fw-bold fst-italic">CurrentBookAndChapter is null</span></text>
	}
	else
	{
		<div class="collapse navbar-collapse justify-content-center">
			<div class="">
				<PreviousButton PreviousBookAndChapter="@CurrentBookAndChapter"
				buttonToShow="ButtonsToShow.PreviousOnly"
				OnBookAndChapterSelected="@ReturnedBookAndChapter" />
			</div>

			<div class="px-1">
				<Picker CurrentBCV="CurrentBCV" OnBCVSelected="ReturnedBCV" />
			</div>

			<div class="">
				<NextButton NextBookAndChapter="@CurrentBookAndChapter"
				buttonToShow="ButtonsToShow.NextOnly"
				OnBookAndChapterSelected="@ReturnedBookAndChapter" />
			</div>

		</div>
	}

	<div class="collapse navbar-collapse justify-content-end pe-1">
		<ConfigureDropdown OnMenuItemSelected="@ReturnedMenuItem" />
	</div>
</nav>

@code {
	// Only used by <PreviousButton> & <NextButton>
	[Parameter, EditorRequired] public BookAndChapter? CurrentBookAndChapter { get; set; }
	[Parameter, EditorRequired] public EventCallback<BookAndChapter> OnBookAndChapterSelected { get; set; }

	// Only used by <Picker>
	[Parameter, EditorRequired] public NumberPad.BookChapterVerse? CurrentBCV { get; set; }
	
	[Parameter, EditorRequired] public EventCallback<NumberPad.BookChapterVerse> OnBCVSelected { get; set; }

	// Only used by <ConfigureDropdown>
	[Parameter, EditorRequired] public EventCallback<Enums.MenuItem> OnMenuItemSelected { get; set; }

	private string Chapter = "0";
	private string TitleOrAbrv => CurrentBookAndChapter!.BibleBook!.Title;
	

	private void ReturnedBook(GlobalEnums.BibleBook bibleBook)  //Enums.BibleBook bibleBook
	{
		OnBookAndChapterSelected.InvokeAsync(new BookAndChapter(bibleBook, 1));
	}

	private void ReturnedBookAndChapter(BookAndChapter bookAndChapter)
	{
		Logger!.LogInformation("{Method}, BookAndChapter: {BookAndChapter}", nameof(ReturnedBookAndChapter), bookAndChapter);
		OnBookAndChapterSelected.InvokeAsync(bookAndChapter);
	}

	private void ReturnedBCV(NumberPad.BookChapterVerse bcv)
	{
		Logger!.LogInformation("{Method}, BookChapterVerse: {BookChapterVerse}", nameof(ReturnedBCV), bcv);
		OnBCVSelected.InvokeAsync(bcv);
	}

	private void ReturnedMenuItem(Enums.MenuItem item)
	{
		OnMenuItemSelected.InvokeAsync(item);
	}


	// Ignore Spelling: Toolbar
}
