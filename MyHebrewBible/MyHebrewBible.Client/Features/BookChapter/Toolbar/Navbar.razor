@using MyHebrewBible.Client.Layout
@using MyHebrewBible.Client.Features.BookChapter.Toolbar.PreviousNext
@using MyHebrewBible.Client.Features.BookChapter.Toolbar.NumberPad
@using MyHebrewBible.Client.Enums
@using MyHebrewBible.Client.Components.Toolbar

@inject ILogger<Navbar>? Logger
@inject IToastService? Toast

<nav class="navbar navbar-expand bg-primary-subtle fixed-top">

	<div class="collapse navbar-collapse justify-content-start">
		<div class="ps-1"><HomeDropdown RecentList="RecentList" OnBCVSelected="OnBCVSelected" /></div>
	</div>

	@if (CurrentBookAndChapter is null)
	{
		<text><span class="text-center fw-bold fst-italic">CurrentBookAndChapter is null</span></text>
	}
	else
	{
		<div class="collapse navbar-collapse justify-content-center">
			<div class="">
				@if (CurrentBookAndChapter.BibleBook!.NavigationPrevious(CurrentBookAndChapter.Chapter).BibleBook is not null)
				{
					<PreviousOrNextButton BookAndChapter="CurrentBookAndChapter"
																IsPrevious=true
																OnBookAndChapterSelected="ReturnedBookAndChapter" />
				}
				else
				{
					<OnEdgeButton />
				}

			</div>

			<div class="px-1">
				<div class="@MediaQuery.Xs.DivClass">
					<Picker CurrentBCV="CurrentBCV" OnBCVSelected="ReturnedBCV" IsXs="true" />
				</div>
				<div class="@MediaQuery.SmOrMdOrLgOrXl.DivClass">
					<Picker CurrentBCV="CurrentBCV" OnBCVSelected="ReturnedBCV" IsXs="false" />
				</div>

			</div>

			@if (CurrentBookAndChapter.BibleBook!.NavigationNext(CurrentBookAndChapter.Chapter).BibleBook is not null)
			{
				<PreviousOrNextButton BookAndChapter="CurrentBookAndChapter"
															IsPrevious=false
															OnBookAndChapterSelected="ReturnedBookAndChapter" />
			}
			else
			{
				<OnEdgeButton />
			}

		</div>
	}

	<div class="collapse navbar-collapse justify-content-end pe-1">
		<MenuTemplate Items="menuItems" OnItemSelected="ReturnedMenuItemString" />
	</div>

</nav>

@code {
	// Only used by <PreviousOrNextButton>
	[Parameter, EditorRequired] public BookAndChapter? CurrentBookAndChapter { get; set; }
	[Parameter, EditorRequired] public EventCallback<BookAndChapter> OnBookAndChapterSelected { get; set; }

	// Only used by <Picker>
	[Parameter, EditorRequired] public NumberPad.BookChapterVerse? CurrentBCV { get; set; }
	[Parameter, EditorRequired] public EventCallback<NumberPad.BookChapterVerse> OnBCVSelected { get; set; }

	// Only used by <MenuTemplate>
	[Parameter, EditorRequired] public EventCallback<Enums.MenuItem> OnMenuItemSelected { get; set; }

	[CascadingParameter] public CascadingAppState? CascadingAppState { get; set; }

	protected List<BookChapterVerseHistory>? RecentList = new();

	private List<Dictionary<int, string?>> menuItems = Enums.MenuItem.List
				.Select(item => new Dictionary<int, string?> { { item.Value, item.Name } })
				.ToList();

	private void ReturnedMenuItemString(string item)
	{
		Enums.MenuItem menuItem;
		if (Enums.MenuItem.TryFromName(item, out menuItem))
		{
			//Logger!.LogInformation("{Method}, MenuItem: {MenuItem}", nameof(ReturnedMenuItemString), menuItem);
			OnMenuItemSelected.InvokeAsync(menuItem);
		}
		else
		{
			Logger!.LogWarning("{Method}, Invalid MenuItem: {MenuItem}", nameof(ReturnedMenuItemString), item);
			Toast!.ShowError($"{Global.ToastShowError} {nameof(Navbar)}!{nameof(ReturnedMenuItemString)} {item}");
			return;
		}
	}

	protected override void OnParametersSet()
	{
		try
		{
			RecentList = CascadingAppState!.AppState!.BookChapterState!.GetBCVs();
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnInitialized));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(Navbar)}!{nameof(OnInitialized)}");
		}
	}

	private string TitleOrAbrv => CurrentBookAndChapter!.BibleBook!.Title;

	//Called by <PreviousOrNextButton>
	private void ReturnedBookAndChapter(BookAndChapter bookAndChapter)
	{
		//Logger!.LogInformation("{Method}, BookAndChapter: {BookAndChapter}", nameof(ReturnedBookAndChapter), bookAndChapter);
		OnBookAndChapterSelected.InvokeAsync(bookAndChapter);
	}

	//Called by <Picker>
	private void ReturnedBCV(NumberPad.BookChapterVerse bcv)
	{
		//Logger!.LogInformation("{Method}, BookChapterVerse: {BookChapterVerse}", nameof(ReturnedBCV), bcv);
		OnBCVSelected.InvokeAsync(bcv);
	}


	// Ignore Spelling: Toolbar
}
