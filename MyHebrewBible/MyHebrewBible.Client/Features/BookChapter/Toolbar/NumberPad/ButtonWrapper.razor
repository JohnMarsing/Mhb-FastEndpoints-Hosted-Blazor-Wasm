@using MyHebrewBible.Client.Features.BookChapter.Toolbar.NumberPad
@using MyHebrewBible.Client.Features.BookChapter.Toolbar.NumberPad.Enums
@using System.Text
@using MyHebrewBible.Client.Helpers

@inject ILogger<ButtonWrapper>? Logger
@inject IToastService? Toast

<PlaceWrapper StepState="StepState" IsDebug=IsDebug>

	<TitleContent>
		@GetTitleContent(@StepState!.Step!.Phase, StepState!.Chapter, StepState!.PlaceValueRec!.Mask)
	</TitleContent>

	<HundredsColumn>
		<div class="@GetPadding()">
			<HundredsButtons CurrentStepState="StepState" OnHundredNumberSelected="OnHundredNumberSelected" />
		</div>
	</HundredsColumn>

	<TensColumn>
		<div class="@GetPadding()">
			<ColumnHeading Place="Enums.Place.Tens" />
			@if (StepState!.Step!.Place == Place.Tens)
			{
				@if (StepState!.Step!.Phase == Phase.Chapter)
				{
					@* ChapterTensAndOnesButtons StepState="StepState" ??? *@
				}
				else
				{
					@* VerseTensAndOnesButtons  StepState="StepState" ??? *@
				}

				<TensAndOnesButtons StepState="StepState"
														LastTensPlaceIsWhole=@GetLastTensPlaceIsWhole()
														OnNumberSelected="ReturnedNumber"
														OnNumberFinished="ReturnedFinalNumber" />
			}
			else
			{
				<IntegerPlaceHolder />
			}
		</div>
	</TensColumn>

	<OnesColumn>
		<div class="@GetPadding()">
			<ColumnHeading Place="Enums.Place.Ones" />
			@if (StepState!.Step!.Place == Place.Tens)
			{
				<IntegerPlaceHolder />
			}
			else
			{
				@if (StepState!.Step!.Place == Place.Ones)
				{
					<TensAndOnesButtons StepState="StepState"
															LastTensPlaceIsWhole=@GetLastTensPlaceIsWhole()
															OnNumberSelected="ReturnedNumber"
															OnNumberFinished="ReturnedFinalNumber" />
				}
				else
				{
					<IntegerPlaceHolder />
				}
			}
		</div>
	</OnesColumn>

	<FooterDebugContent>
		<p class="text-center mt-3 mb-1">@StepState!.Dump()</p>
		<p class="text-center mt-1">@StepState!.Dump2()</p>
		<p>
			<div class="d-flex justify-content-between">
				<div class="@GetPadding()">
					<span style="font-size:14px;">Phase: @StepState!.Step!.Phase</span>
				</div>
				<div class="@GetPadding()">
					<span style="font-size:14px;">Step: @StepState!.Step!.Place</span>
				</div>
			</div>
		</p>

	</FooterDebugContent>

	<Footer>
		<div class=" mt-2 mb-1">
			@* StepState!.Phase *@
			<div class="d-flex justify-content-center py-2">
				<button id="backspace" @onclick="() => ButtonClick()"
								type="button" title="@StepState!.Step!.Phase" class="btn btn-primary btn-sm @BackSpaceDisable">
					<i class="fas fa-backspace"></i> Step @StepState!.Step!.Phase
				</button>
			</div>
		</div>
	</Footer>

</PlaceWrapper>

@code {
	[Parameter, EditorRequired] public GlobalEnums.BibleBook? BibleBook { get; set; }
	[Parameter, EditorRequired] public EventCallback<BookChapterVerse> OnBCVSelected { get; set; }

	private const bool IsDebug = true; // ToDo: remove this when done debugging

	protected int SelectedVerse = 0; // ToDo: are you going to use this or not.
	protected StepState? StepState { get; set; }

	protected override void OnParametersSet()
	{
		//StepState = new StepState(BibleBook);
		StepState = new StepState(BibleBook, Logger!);
	}

	private void OnHundredNumberSelected(int number)
	{
		//Logger!.LogInformation("{Method}, number: {number}", nameof(OnHundredNumberSelected), number);
		StepState!.UpdatePlaceValueRecForHundreds(number);
		StepState!.SetNextStepNoPhaseChange();
	}


	private void ReturnedNumber(ReturnedNumberNotFinishedVM vm)
	{
		Logger!.LogInformation("{Method}, VM: {VM}", nameof(ReturnedNumber), vm);

		if (vm.SkipChapterOnes)
		{
			Logger!.LogWarning("... SkipChapterOnes is True");
			StepState!.UpdatePlaceValueRecForTens(vm.Number); // e.g. Gen 50
			StepState!.UpdateOnesPlaceValueRecAndSetChapter(0);

			StepState!.SetLastVerse();
			StepState!.SetNextStepForSecondPhase();
			StepState!.LoadPlaceValueRecForVerse();
		}
		else // (!vm.SkipChapterOnes)
		{
			if (StepState!.Step!.Place == Enums.Place.Tens)
			{
				Logger!.LogWarning("... Place is Tens");
				StepState!.UpdatePlaceValueRecForTens(vm.Number);
				StepState!.SetNextStepNoPhaseChange();
			}
			else
			{
				Logger!.LogWarning("... Place is NOT Tens, it's: {Place}", StepState!.Step!.Place);
				StepState!.UpdateOnesPlaceValueRecAndSetChapter(vm.Number);
				StepState!.SetLastVerse();              // bibleBook!.LastVerses[chapter - 1];
				StepState!.SetNextStepForSecondPhase(); // depends on LastVerse
				StepState!.LoadPlaceValueRecForVerse(); // depends on LastVerse
			}
		}
	}

	private void ReturnedFinalNumber(ReturnedNumberFinishedVM vm)
	{
		Logger!.LogInformation("{Method}, VM: {VM}", nameof(ReturnedFinalNumber), vm);

		if (!vm.SkipingVerseOnes) // Normal Path
		{
			StepState!.UpdatePlaceValueRecForOnes(vm.Number);
		}
		else  // vm.SkipingVerseOnes == true
		{
			StepState!.UpdatePlaceValueRecForTens(vm.Number);  // e.g. Ezr 2:7
			StepState!.UpdatePlaceValueRecForOnes(0);
		}

		int verse = StepState!.GetVerse();
		BookChapterVerse BCV = new BookChapterVerse(BibleBook, StepState!.Chapter, verse);
		Logger!.LogInformation("{Method}, TSC.Finished , B/C/V {bcv}", nameof(ReturnedFinalNumber), BCV);
		Toast!.ShowInfo($"{BookChapterVerseHelper.Dump(BCV)}");
		OnBCVSelected.InvokeAsync(BCV);
	}

	private int GetLastTensPlaceIsWhole()
	{
		Logger!.LogInformation("{Method}, PlaceValueRec: {PlaceValueRec}"
		, nameof(GetLastTensPlaceIsWhole), StepState!.PlaceValueRec!);

		if (StepState!.PlaceValueRec!.IsWhole)
		{
			// If PlaceValueRec.IsWhole is true than PlaceValueRec.Ten must have an int
			if (StepState!.PlaceValueRec.Tens is not null)
			{
				return (int)StepState!.PlaceValueRec.Tens!;
			}
			else { return 0; }
		}
		else { return 0; }
	}

	//private int GetLastTensPlaceIsWhole()	{	}

	//<ResetButton Place="Place" OnPlaceSelected="ReturnedPlace" />
	//[Parameter, EditorRequired] public EventCallback<Place> OnPlaceSelected { get; set; }

	protected string? BackSpaceDisable = " disabled";
	private void ButtonClick()
	{

	}

	#region GetProperties

	private MarkupString GetTitleContent(Enums.Phase? phase, int chapter, string mask) //, int verse
	{
		const string check = "<span class='text-success'><i class='fas fa-check'></i></span>";

		StringBuilder sb = new();
		sb.Append(" <h6 class='text-center py-2'> ")
			.Append("Chapter: ")
			.AppendIfElse(chapter == 0, $"<u>{mask}</u>", $"<b>{chapter}</b> {check}").Append("<br />")
			//.AppendIfElse(chapter == 0, $"<u>{mask}</u>", $"<b>{chapter}</b> {check}").AppendIf(IsDebug, " of []").Append("<br />")
			.AppendIfElse(chapter == 0, $"<span class='fw-lighter'>Verse: ___</span>", $"Verse: <u>{mask}</u>")
			// .AppendIf(verse != 0, $"<b>{verse} {check}</b>")
			.Append("</h6>");

		return (MarkupString)sb.ToString();
	}


	protected string GetPadding()
	{
		return "pe-2"; //pe-3
	}

	#endregion
}
