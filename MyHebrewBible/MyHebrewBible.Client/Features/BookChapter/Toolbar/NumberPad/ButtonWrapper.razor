@using MyHebrewBible.Client.Features.BookChapter.Enums
@using LastVerseHelper = MyHebrewBible.Client.Enums.LastVerseHelper

@inject ILogger<ButtonWrapper>? Logger
@inject IToastService? Toast 

<h6 class="text-center">
	@* 
	Phase: @StepState!.CurrentPhase	<br />  ToDo: this doesn't get updated here
 *@

	@PlaceValueRecHelper.Concatenate(StepState!.PlaceValueRec!)
	<br />
	Selected Chapter: <b>@StepState.Chapter</b> LastVerse: <b>@StepState.LastVerse</b>
	@* Selecting Chapter Places  *@
</h6>

@* @if (StepState.CurrentStep > Step.VerseOne.Value)
{
	<h6 class="text-center">
		Selecting Verse Places
		<br />
		@PlaceValueRecHelper.Concatenate(StepState!.PlaceValueRec!)
	</h6>
	}
 *@

@* text-black-50 *@
<p class="text-center">
	@* <span style="font-size:1px;">Step: @StepState!.CurrentStep | MaxPlace: @StepState.CurrentMaxPlace</span> *@
	<span style="font-size:14px;">Step: @StepState!.CurrentStep</span>
</p>

<div class="d-flex justify-content-center">
	<div class="@GetPadding()">
		@if (StepState.ChapterHundredIsVisible)
		{
			<HundredsButtons CurrentStepState="StepState" OnHundredNumberSelected="OnHundredNumberSelected" />
		}
	</div>

	@if (StepState!.CurrentStep == Enums.Step.ChapterTen || StepState!.CurrentStep == Enums.Step.VerseTen)
	{
		<div class="@GetPadding()">
			<TensAndOnesButtons CurrentStepState="StepState" Place=Place.Tens OnNumberSelected="ReturnedNumber" />
		</div>
		<div class="@GetPadding()">
			<ButtonPadPlaceHolder SubTitle="@Place.Ones.ColumnName" />
		</div>
	}
	else
	{
		<div class="@GetPadding()">
			<ButtonPadPlaceHolder SubTitle="@Place.Tens.ColumnName" />
		</div>
		<div class="@GetPadding()">
			<TensAndOnesButtons CurrentStepState="StepState" Place=Place.Ones OnNumberSelected="ReturnedNumber" />
		</div>
	}

</div>

@* <div class="bg-dark-subtle text-black-50 my-3">*@
<div class=" mt-2 mb-1">

	<div class="d-flex justify-content-center py-2">
		<button id="backspace" @onclick="() => ButtonClick()"
		type="button" title="@StepState!.CurrentPhase" class="btn btn-primary btn-sm @BackSpaceDisable">
			<i class="fas fa-backspace"></i> Step @StepState!.CurrentPhase
		</button>
	</div>
</div>


@code {
	[Parameter, EditorRequired] public GlobalEnums.BibleBook? BibleBook { get; set; }
	[Parameter, EditorRequired] public EventCallback<BookChapterVerse> OnBCVSelected { get; set; }


	protected StepState? StepState { get; set; }

	protected override void OnParametersSet()
	{
		StepState = new StepState(BibleBook);
	}

	protected string GetPadding()
	{
		return "pe-2"; //pe-3
	}

	private void OnHundredNumberSelected(int number)
	{
		Logger!.LogInformation("{Method}, number: {number}"
		, nameof(OnHundredNumberSelected), number);
	}

	private void ReturnedNumber(ReturnedNumberVM vm)
	{
		Logger!.LogInformation("{Method}, ReturnedNumberVM: {ReturnedNumberVM}, Chapter: {Chapter}"
		, nameof(ReturnedNumber), vm, StepState!.Chapter);

		string before = StepState!.CurrentStep!.Name;
		StepState!.ChangeCurrentStep(StepState!.CurrentStep!.DirectionForward, vm.Number);

		Logger!.LogInformation("{Method}, Before/After {BeforeAfter}"
		, nameof(ReturnedNumber), $"B/A: {before}/{StepState!.CurrentStep!.Name}");

		if (vm.Finished)
		{
			StepState!.PlaceValueRec = StepState!.PlaceValueRec! with { Ones = vm.Number };
			//int verse = PlaceValueRecHelper.Combine(StepState.PlaceValueRec!);
			StepState.Verse = PlaceValueRecHelper.Combine(StepState.PlaceValueRec!);

			Logger!.LogInformation("{Method}, Call Combine(), PlaceValueRec: {PlaceValueRec}, Verse: {Verse}"
		, nameof(ReturnedNumber), StepState!.PlaceValueRec, StepState.Verse);


			Logger!.LogInformation("{Method}, BibleBook: {BibleBook}, C/V {Chapter}/{Verse}"
			, nameof(ReturnedNumber), BibleBook!.Name, StepState!.Chapter, StepState.Verse);  //, verse
			
			Toast!.ShowWarning($"{BibleBook!.Abrv} {StepState!.Chapter}:{StepState.Verse}"); // {verse}

			OnBCVSelected.InvokeAsync(new BookChapterVerse(BibleBook, StepState!.Chapter, StepState.Verse)); // , verse
		}
	}

	//<ResetButton Place="Place" OnPlaceSelected="ReturnedPlace" />
	//[Parameter, EditorRequired] public EventCallback<Place> OnPlaceSelected { get; set; }
	protected string? BackSpaceDisable = "";
	private void ButtonClick()
	{

	}

}
