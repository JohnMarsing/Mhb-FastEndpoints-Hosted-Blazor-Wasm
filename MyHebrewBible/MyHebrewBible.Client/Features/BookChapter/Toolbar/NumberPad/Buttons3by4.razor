@* @Title: *@
<p class="text-center">Max: @Max CV: @CurrentValue</p>

@inject IToastService? Toast

@* <p class="text-black-50 text-center " style="font-size:11px;">10's</p> *@

<div class="d-flex justify-content-between">
	<div>
		<div class="d-flex justify-content-center">
			<span class="text-black-50 text-center" style="font-size:11px;">100's</span>
		</div>
		<div class="d-flex justify-content-center">
				<button class="btn btn-outline-danger font-monospace @fontSize" @onclick="() => AppendNumber(1)">1</button>
		</div>
	</div>


	<div>
		<div class="d-flex justify-content-center">
			<span class="text-black-50 text-center" style="font-size:11px;">tens</span>
		</div>
		<div class="d-flex justify-content-center">

			@for (int i = 1; i <= 3; i++)
			{
				int iLocal = i;
				<button class="btn btn-outline-warning font-monospace @fontSize" @onclick="() => AppendNumber(iLocal)">@iLocal</button>
			}
		</div>
		<div class="d-flex justify-content-center">
			@for (int i = 4; i <= 6; i++)
			{
				int iLocal = i;
				<button class="btn btn-outline-warning font-monospace @fontSize" @onclick="() => AppendNumber(iLocal)">@iLocal</button>
			}
		</div>
	</div>


	<div>
		<div class="d-flex justify-content-center">
			<span class="text-black-50 text-center" style="font-size:11px;">ones</span>
		</div>

		<div class="d-flex justify-content-center">
			@for (int i = 1; i <= 3; i++)
			{
				int iLocal = i;
				<button class="btn btn-outline-info font-monospace @fontSize" @onclick="() => AppendNumber(iLocal)">@iLocal</button>
			}
		</div>

		<div class="d-flex justify-content-center">
			@for (int i = 4; i <= 6; i++)
			{
				int iLocal = i;
				<button class="btn btn-outline-info font-monospace @fontSize" @onclick="() => AppendNumber(iLocal)">@iLocal</button>
			}
		</div>

		<div class="d-flex justify-content-center">
			@for (int i = 7; i <= 9; i++)
			{
				int iLocal = i;
				<button class="btn btn-outline-info font-monospace @fontSize" @onclick="() => AppendNumber(iLocal)">@iLocal</button>
			}
		</div>

		<div class="d-flex justify-content-center">
			<button class="btn btn-outline-info font-monospace @fontSize">&nbsp;</button>
			<button class="btn btn-outline-info font-monospace @fontSize" @onclick="() => AppendNumber(0)">0</button>
			<button class="btn btn-outline-info font-monospace @fontSize">&nbsp;</button>
		</div>
	</div>

</div>

@code {
	//[Parameter, EditorRequired] public VM? VM { get; set; }
	//[Parameter, EditorRequired] public string Title { get; set; }
	[Parameter, EditorRequired] public int Max { get; set; }

	//[Parameter] public int CurrentValue { get; set; } = 0;
	[Parameter] public string CurrentValue { get; set; } = "0";

	//[Parameter] public EventCallback<int> CurrentValueChanged { get; set; }
	[Parameter] public EventCallback<string> CurrentValueChanged { get; set; }

	//private string CurrentValue = "0";
	private void AppendNumber(int number)
	{
		Toast!.ShowInfo($"Inside: {nameof(AppendNumber)}; number: {number}");
		//if (CurrentValue == 0)
		if (CurrentValue == "0")
		{
			//CurrentValue = number;
			CurrentValue = number.ToString();
		}
		else
		{
			int i = int.Parse(CurrentValue);
			//if (CurrentValue + number > Max)
			if (i + number > Max)
			{
				Toast!.ShowWarning($"The number {CurrentValue + number} is greater than {Max}");
			}
			else
			{
				CurrentValue += number.ToString();  //number;
				Toast!.ShowSuccess($"New CurrentValue: {CurrentValue + number}");
				NotifyValueChanged();
			}
		}
	}


	private async void NotifyValueChanged()
	{
		if (CurrentValueChanged.HasDelegate)
		{
			await CurrentValueChanged.InvokeAsync(CurrentValue);
		}
	}


	#region chrome
	string fontSize => "fs-4"; // fs-5
	#endregion

}