@inject ILoggerFactory LoggerFactory

<!-- 1st row GetZeroButtonClass -->
<div class="d-flex justify-content-center">
	<button class="@Helper.GetButtonClassEmptyNoColor()">&nbsp;</button>
	<button id="@GetId(0)" title="@GetId(0)" class="@GetZeroButtonClass()" @onclick="() => ButtonClick(0)">0</button>
	<button class="@Helper.GetButtonClassEmptyNoColor()">&nbsp;</button>
</div>

<!-- 2nd row Cols 1-3 -->
<div class="d-flex justify-content-center">
	<button id="@GetId(1)" title="@GetId(1)" class="@GetButtonClass(1)" @onclick="() => ButtonClick(1)">1</button>
	<button id="@GetId(2)" title="@GetId(2)" class="@GetButtonClass(2)" @onclick="() => ButtonClick(2)">2</button>
	<button id="@GetId(3)" title="@GetId(3)" class="@GetButtonClass(3)" @onclick="() => ButtonClick(3)">3</button>
</div>

<!-- 3rd row Cols 4-6 -->
<div class="d-flex justify-content-center">
	<button id="@GetId(4)" title="@GetId(4)" class="@GetButtonClass(4)" @onclick="() => ButtonClick(4)">4</button>
	<button id="@GetId(5)" title="@GetId(5)" class="@GetButtonClass(5)" @onclick="() => ButtonClick(5)">5</button>
	<button id="@GetId(6)" title="@GetId(6)" class="@GetButtonClass(6)" @onclick="() => ButtonClick(6)">6</button>
</div>

<!-- 3rd row Cols 7-9 -->
<div class="d-flex justify-content-center">
	<button id="@GetId(7)" title="@GetId(7)" class="@GetButtonClass(7)" @onclick="() => ButtonClick(7)">7</button>
	<button id="@GetId(8)" title="@GetId(8)" class="@GetButtonClass(8)" @onclick="() => ButtonClick(8)">8</button>
	<button id="@GetId(9)" title="@GetId(9)" class="@GetButtonClass(9)" @onclick="() => ButtonClick(9)">9</button>
</div>

@code {
	[Parameter, EditorRequired] public StepState? StepState { get; set; }
	[Parameter, EditorRequired] public int LastTensPlaceIsWhole { get; set; } // If 0 then like being null
	[Parameter, EditorRequired] public EventCallback<ReturnedChapterNumberVM> OnNumberSelected { get; set; }

	private ILogger? Logger;
	protected override void OnInitialized()
	{
		Logger = LoggerFactory.CreateLogger($"{nameof(ChapterTensAndOnesButtons)}");
	}

	protected string GetButtonClass(int number)
	{
		@if (StepState!.Step!.Place == Enums.Place.Tens)
		{
			return GetTensPlaceButtonClass(number);
		}
		else // Place == Enums.Place.Ones
		{
			return GetOnesPlaceButtonClass(number);
		}
	}

	private string GetTensPlaceButtonClass(int number)
	{
		if (number <= StepState!.PlaceValueRec!.Tens)
		{
			if (number == LastTensPlaceIsWhole)
			{
				return $"btn {Helper.GetButtonColor(LastTensPlaceIsWhole)} {Helper.GetDefaultButtonClass()}";
			}
			else
			{
				return $"btn {Helper.GetButtonColor(0)} {Helper.GetDefaultButtonClass()}";
			}
		}
		else
		{
			return $"btn {Helper.GetDisabledColor()} disabled  {Helper.GetDefaultButtonClass()}";
		}

	}

	private string GetOnesPlaceButtonClass(int number)
	{
		int one = 0;

		if (StepState!.PlaceValueRec!.IsWhole) { one = 9; }
		else { one = StepState!.PlaceValueRec!.Ones; }

		if (number <= one)
		{
			return $"btn {Helper.GetButtonColor(0)} {Helper.GetDefaultButtonClass()}";
		}
		else
		{
			return $"btn {Helper.GetDisabledColor()} disabled  {Helper.GetDefaultButtonClass()}";
		}
	}

	protected string GetZeroButtonClass()
	{
		if (PlaceValueRecHelper.OnesPlaceZeroButtonIsDisabled(StepState!.PlaceValueRec!))
		{
			return $"btn {Helper.GetDisabledColor()} disabled {Helper.GetDefaultButtonClass()}";
		}
		else
		{
			return $"btn {Helper.GetButtonColor(0)} {Helper.GetDefaultButtonClass()}";
		}
	}


	private string GetId(int number)
	{
		return $"{StepState!.Step!.PlaceShortName}-{number}";
	}

	private void ButtonClick(int number)
	{
		bool skipChapterOnes = (number > 0 && number == LastTensPlaceIsWhole);

		Logger!.LogInformation("{Method}, number: {number}, Step.Name: {Step.Name}, LastTensPlaceIsWhole: {LastTensPlaceIsWhole}, skipChapterOnes: {skipChapterOnes}"
			, nameof(ButtonClick), number, StepState!.Step!.Name, LastTensPlaceIsWhole, skipChapterOnes);

		OnNumberSelected.InvokeAsync(new ReturnedChapterNumberVM(number, skipChapterOnes));
	}
}
