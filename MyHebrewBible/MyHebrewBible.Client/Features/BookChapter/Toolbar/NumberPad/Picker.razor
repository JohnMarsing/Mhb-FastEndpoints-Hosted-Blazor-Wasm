@using MyHebrewBible.Client.Enums

@inject ILogger<Picker>? Logger

@* <h5>BCV: @Title</h5> *@
@if (ModalIsNotShownToggle)
{
	<button type="button" class="btn btn-info"
	@onclick="() => ShowModal()">
		@Title <i class="fas fa-angle-down"></i>
	</button>
}
else
{
	<div class="@modalClass" style="display:@(modalOpen?"block":"none");">
		<div class="modal-dialog @modalSize">
			<div class="modal-content @modalContentColor">
				<div class="modal-header @modalHeaderColor">

					<p>Select a Book</p>

					<button type="button" class="close" @onclick="CloseModal">
						<span>&times;</span>
					</button>
				</div>

				<div class="modal-body @modalBodyColor">

					<BlazoredTypeahead SearchMethod="SearchBibleBooks"
					TValue="BibleBook"
					TItem="BibleBook"
					Value="SelectedBook"
					ValueChanged="SelectedBookChanged"
					ValueExpression="@(() => SelectedBook)"
					EnableDropDown="true"
					MaximumSuggestions="66"
					MinimumLength="1"
					placeholder="Search bible...">
						<SelectedTemplate Context="mycontext">
							<span class="fs-4">@mycontext!.Title</span>
						</SelectedTemplate>
						<HelpTemplate>
							Please enter at least 1 characters to perform a search.
						</HelpTemplate>
						<ResultTemplate Context="mycontext">
							<div class="d-flex justify-content-between">
								@mycontext!.Title
							</div>
						</ResultTemplate>
					</BlazoredTypeahead>

				</div>

				<div class="modal-body @modalBodyColor">
					@* <Buttons3by4 VM="VM" CurrentValueChanged="ReturnedValue" />  Title="" *@
					<Buttons3by4 Max="maxChapter" CurrentValueChanged="ReturnedValue" />
				</div>

				<div class="modal-footer @modalFooterColor d-flex justify-content-between">
					<button type="button" class="btn btn-primary">Clear</button>
					<span>
						@SubTitle
					</span> 


					<button type="button" class="btn btn-primary">Go</button>
				</div>

			</div>
		</div>
	</div>
}


@code {
	//[Parameter, EditorRequired] public BookChapterVerse? CurrentBCV { get; set; }
	[Parameter, EditorRequired] public PickerVM? CurrentPickerVM { get; set; }
	[Parameter] public EventCallback<BookChapterVerse> OnBCVSelected { get; set; }

	//protected VM? VM;
	protected int maxChapter = 0;
	protected int maxVerse = 0;

	protected BibleBook? SelectedBook { get; set; }
	protected BookChapterVerse? SelectedBCV { get; set; } // why do I need this???

	// MediaQuery == MediaQuery.Xs ? CurrentBookAndChapter!.BibleBook!.Abrv : CurrentBookAndChapter!.BibleBook!.Title;
	string Title => CurrentPickerVM!.BCV.BibleBook!.Title;
	string SubTitle = string.Empty;


	protected override void OnParametersSet()
	{
		//if (CurrentBCV is not null && CurrentBCV.BibleBook is not null)
		if (CurrentPickerVM is not null && CurrentPickerVM.BCV is not null && CurrentPickerVM.BCV.BibleBook is not null)
		{
			SelectedBook = CurrentPickerVM!.BCV.BibleBook;
			SelectedBCV = CurrentPickerVM!.BCV;

			//VM = new VM(true, SelectedBook.LastChapter);
			maxChapter = SelectedBook.LastChapter;
			//maxVerse = BibleBook!.LastVerses[chapter - 1]; // SelectedBook.LastVerses;
			//SubTitle = VM!.IsForChapter ? "Chapter" : "Verse";
			SubTitle = CurrentPickerVM.Step!.Heading;
		}
	}

	private async Task<IEnumerable<BibleBook>> SearchBibleBooks(string searchText)
	{
		return await Task.FromResult(BibleBook.List
			.Where(x => x.Title.ToLower().Contains(searchText.ToLower()))
			.OrderBy(o => o.Value));
	}

	private void SelectedBookChanged(BibleBook? bibleBook)
	{
		if (bibleBook is not null)
		{
			Logger!.LogInformation("{Method}, BibleBook: {BibleBook}", nameof(SelectedBookChanged), bibleBook.Name);
			// Tab to the next field
			SelectedBook = bibleBook;
			SelectedBCV = SelectedBCV! with { BibleBook = bibleBook };
			OnBCVSelected.InvokeAsync(SelectedBCV);
			//SubTitle = CurrentPickerVM!.Step!.Heading;
		}
	}

	//private void ReturnedValue(int value)
	private void ReturnedValue(string value)
	{
		//if (VM!.IsForChapter)
		int i = int.Parse(value);
		if (CurrentPickerVM!.Step == Enums.StepBCV.NeedChapter)
		{
			SelectedBCV = SelectedBCV! with { Chapter = i }; // =  value;
			CurrentPickerVM = CurrentPickerVM with { Step = Enums.StepBCV.NeedVerse };
			//VM = VM with { IsForChapter = false };
		}
		else
		{
			SelectedBCV = SelectedBCV! with { Verse = i };
		}
		OnBCVSelected.InvokeAsync(SelectedBCV);
	}

	void ShowModal()
	{
		modalOpen = true;
		ModalIsNotShownToggle = false;
		modalClass += " show";
		StateHasChanged();
	}

	void CloseModal()
	{
		modalOpen = false;
		ModalIsNotShownToggle = true;
		modalClass = "modal";
	}
	
	#region chrome
	bool modalOpen = false;
	string modalClass = "modal";
	string modalSize => "modal-sm"; // MediaQuery == MediaQuery.Xs ? "modal-sm" : "modal-md";
	string modalHeaderColor = "bg-warning";
	string modalContentColor = " border-danger";
	string modalBodyColor = "";  // bg-warning-subtle
	string modalFooterColor = "bg-dark-subtle text-black-50";  //  bg-light
	bool ModalIsNotShownToggle = true;
	#endregion
}
