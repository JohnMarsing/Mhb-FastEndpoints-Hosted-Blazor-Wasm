@using MyHebrewBible.Client.Enums
@using MyHebrewBible.Client.Features.BookChapter.Enums

@inject ILogger<Picker>? Logger

@if (ModalIsNotShownToggle)
{
	<button type="button" class="btn btn-info"
	@onclick="() => ShowModal()">
		@Title <i class="fas fa-angle-down"></i>
	</button>
}
else
{
	<div class="@modalClass" style="display:@(modalOpen?"block":"none");">
		<div class="modal-dialog @modalSize">
			<div class="modal-content @modalContentColor">
				<div class="modal-header @modalHeaderColor">

					<p>Select a Book</p>

					<button type="button" class="close" @onclick="CloseModal">
						<span>&times;</span>
					</button>
				</div>

				<div class="modal-body @modalBodyColor">

					<BlazoredTypeahead SearchMethod="SearchBibleBooks"
					TValue="BibleBook"
					TItem="BibleBook"
					Value="SelectedBook"
					ValueChanged="SelectedBookChanged"
					ValueExpression="@(() => SelectedBook)"
					EnableDropDown="true"
					MaximumSuggestions="66"
					MinimumLength="1"
					placeholder="Search bible...">
						<SelectedTemplate Context="mycontext">
							<span class="fs-4">@mycontext!.Title</span>
						</SelectedTemplate>
						<HelpTemplate>
							Please enter at least 1 characters to perform a search.
						</HelpTemplate>
						<ResultTemplate Context="mycontext">
							<div class="d-flex justify-content-between">
								@mycontext!.Title
							</div>
						</ResultTemplate>
					</BlazoredTypeahead>

				</div>

				<div class="modal-body pt-0 @modalBodyColor">


					@* <Buttons3by4 BibleBook="SelectedBook" OnBCVSelected="ReturnedBCV" /> *@
					<ButtonWrapper BibleBook="SelectedBook" OnBCVSelected="ReturnedBCV" />
				</div>

@* 				<div class="modal-footer @modalFooterColor">
				</div> *@

			</div>
		</div>
	</div>
}

@code {
	[Parameter, EditorRequired] public BookChapterVerse? CurrentBCV { get; set; }
	[Parameter] public EventCallback<BookChapterVerse> OnBCVSelected { get; set; }

	protected BibleBook? SelectedBook { get; set; }
	protected BookChapterVerse? SelectedBCV { get; set; } // why do I need this???

	string Title => $"{CurrentBCV!.BibleBook!.Title} {CurrentBCV.Chapter}";

	protected override void OnParametersSet()
	{
		if (CurrentBCV is not null && CurrentBCV.BibleBook is not null)
		{
			SelectedBook = CurrentBCV!.BibleBook;
			SelectedBCV = CurrentBCV;
		}
	}

	private async Task<IEnumerable<BibleBook>> SearchBibleBooks(string searchText)
	{
		return await Task.FromResult(BibleBook.List
			.Where(x => x.Title.ToLower().Contains(searchText.ToLower()))
			.OrderBy(o => o.Value));
	}

	private void SelectedBookChanged(BibleBook? bibleBook)
	{
		if (bibleBook is not null)
		{
			//Logger!.LogInformation("{Method}, BibleBook: {BibleBook}", nameof(SelectedBookChanged), bibleBook.Name);
			// Tab to the next field
			SelectedBook = bibleBook;
			SelectedBCV = SelectedBCV! with { BibleBook = bibleBook };
		}
	}

	private void ReturnedBCV(BookChapterVerse bcv)
	{
		SelectedBCV = bcv;
		Logger!.LogInformation("{Method}, BibleBook: {BibleBook}", nameof(ReturnedBCV), bcv);
		CloseModal();
	 	OnBCVSelected.InvokeAsync(SelectedBCV);
	}

	#region Show-Close
	void ShowModal()
	{
		modalOpen = true;
		ModalIsNotShownToggle = false;
		modalClass += " show";
		StateHasChanged();
	}

	void CloseModal()
	{
		modalOpen = false;
		ModalIsNotShownToggle = true;
		modalClass = "modal";
	}
#endregion

	#region chrome
	bool modalOpen = false;
	string modalClass = "modal";
	string modalSize => "modal-sm"; // MediaQuery == MediaQuery.Xs ? "modal-sm" : "modal-md";
	string modalHeaderColor = "bg-warning";
	string modalContentColor = " border-danger";
	string modalBodyColor = "";  // bg-warning-subtle
	string modalFooterColor = "bg-dark-subtle text-black-50";  //  bg-light
	bool ModalIsNotShownToggle = true;
	#endregion
}
