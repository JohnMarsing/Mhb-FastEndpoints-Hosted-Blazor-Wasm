
@inject ILoggerFactory LoggerFactory

<!-- 1st row GetZeroButtonClass -->
<div class="d-flex justify-content-center">
	<button class="@Helper.GetButtonClassEmptyNoColor()">&nbsp;</button>
	<button id="@GetId(0)" title="@GetId(0)" class="@GetZeroButtonClass()" @onclick="() => ButtonClick(0)">0</button>
	<button class="@Helper.GetButtonClassEmptyNoColor()">&nbsp;</button>
</div>

<!-- 2nd row Cols 1-3 -->
<div class="d-flex justify-content-center">
	<button id="@GetId(1)" title="@GetId(1)" class="@GetButtonClass(1)" @onclick="() => ButtonClick(1)">1</button>
	<button id="@GetId(2)" title="@GetId(2)" class="@GetButtonClass(2)" @onclick="() => ButtonClick(2)">2</button>
	<button id="@GetId(3)" title="@GetId(3)" class="@GetButtonClass(3)" @onclick="() => ButtonClick(3)">3</button>
</div>

<!-- 3rd row Cols 4-6 -->
<div class="d-flex justify-content-center">
	<button id="@GetId(4)" title="@GetId(4)" class="@GetButtonClass(4)" @onclick="() => ButtonClick(4)">4</button>
	<button id="@GetId(5)" title="@GetId(5)" class="@GetButtonClass(5)" @onclick="() => ButtonClick(5)">5</button>
	<button id="@GetId(6)" title="@GetId(6)" class="@GetButtonClass(6)" @onclick="() => ButtonClick(6)">6</button>
</div>

<!-- 3rd row Cols 7-9 -->
<div class="d-flex justify-content-center">
	<button id="@GetId(7)" title="@GetId(7)" class="@GetButtonClass(7)" @onclick="() => ButtonClick(7)">7</button>
	<button id="@GetId(8)" title="@GetId(8)" class="@GetButtonClass(8)" @onclick="() => ButtonClick(8)">8</button>
	<button id="@GetId(9)" title="@GetId(9)" class="@GetButtonClass(9)" @onclick="() => ButtonClick(9)">9</button>
</div>


@code {

	[Parameter, EditorRequired] public StepState? StepState { get; set; }
	//[Parameter, EditorRequired] public int WHAT-GOES-HERE { get; set; } // If 0 then like being null
	[Parameter, EditorRequired] public int LastTensPlaceIsWhole { get; set; } // If 0 then like being null
	[Parameter, EditorRequired] public EventCallback<ReturnedVerseNumberVM> OnNumberSelected { get; set; }

	int SelectedTensPlace = 0;
	int MaxTensPlace = 0;
	int MaxOnesPlace = 0;


	private ILogger? Logger;
	protected override void OnInitialized()
	{
		Logger = LoggerFactory.CreateLogger($"{nameof(VerseTensAndOnesButtons)}");
	}

	protected override void OnParametersSet()
	{
		Logger!.LogInformation("{Method}, LV: {StepState!.LastVerse}", nameof(OnParametersSet), StepState!.LastVerse);

		MaxTensPlace = (StepState!.LastVerse / 10) % 10;
		SelectedTensPlace = StepState!.PlaceValueRec!.Tens is not null ? (int)StepState!.PlaceValueRec!.Tens! : 0;

		int onesDigit = 0;
		if (StepState!.Step!.Place == Enums.Place.Ones)
		{
			onesDigit = StepState!.LastVerse % 10;
			if (onesDigit == 0) onesDigit = 10;
			MaxOnesPlace = onesDigit;
		}

		Logger!.LogWarning("...TensPlace Selected {SelectedTensPlace}/Max: {MaxTensPlace}; MaxOnesPlace: {MaxOnesPlace}"
		, SelectedTensPlace, MaxTensPlace, MaxOnesPlace);
	}

	protected string GetButtonClass(int number)
	{
		@if (StepState!.Step!.Place == Enums.Place.Tens)
		{
			return GetTensPlaceButtonClass(number);
		}
		else // Place == Enums.Place.Ones
		{
			return GetOnesPlaceButtonClass(number);
		}
	}

	private string GetTensPlaceButtonClass(int number)
	{
		if (number <= StepState!.PlaceValueRec!.Tens)
		{
			if (number == LastTensPlaceIsWhole)
			{
				return $"btn {Helper.GetButtonColor(LastTensPlaceIsWhole)} {Helper.GetDefaultButtonClass()}";
			}
			else
			{
				return $"btn {Helper.GetButtonColor(0)} {Helper.GetDefaultButtonClass()}";
			}
		}
		else
		{
			return $"btn {Helper.GetDisabledColor()} disabled  {Helper.GetDefaultButtonClass()}";
		}

	}

	private string GetOnesPlaceButtonClass(int number)
	{
		if (SelectedTensPlace < MaxTensPlace)
		{
			return $"btn {Helper.GetButtonColor(0)} {Helper.GetDefaultButtonClass()}";
		}
		else
		{
			if (number <= MaxOnesPlace)
			{
				return $"btn {Helper.GetButtonColor(0)} {Helper.GetDefaultButtonClass()}";
			}
			else
			{
				return $"btn {Helper.GetDisabledColor()} disabled  {Helper.GetDefaultButtonClass()}";
			}
		}
	}

	protected string GetZeroButtonClass()
	{
		if (PlaceValueRecHelper.OnesPlaceZeroButtonIsDisabled(StepState!.PlaceValueRec!))
		{
			return $"btn {Helper.GetDisabledColor()} disabled {Helper.GetDefaultButtonClass()}";
		}
		else
		{
			return $"btn {Helper.GetButtonColor(0)} {Helper.GetDefaultButtonClass()}";
		}
	}

	private string GetId(int number)
	{
		return $"{StepState!.Step!.PlaceShortName}-{number}";
	}

	private void ButtonClick(int number)
	{
		try
		{
			if (StepState!.Step == Enums.Step.VerseOne)
			{
				OnNumberSelected.InvokeAsync(new ReturnedVerseNumberVM(number, Finished: true, ShortCircuit: false));
			}
			else
			{
				//if (number == MaxTensPlace)
				if (number == MaxTensPlace && StepState!.PlaceValueRec!.IsWhole)
				{
					OnNumberSelected.InvokeAsync(new ReturnedVerseNumberVM(number, Finished: true, ShortCircuit: true));
				}
				else
				{
					OnNumberSelected.InvokeAsync(new ReturnedVerseNumberVM(number, Finished: false, ShortCircuit: false));
				}
				OnNumberSelected.InvokeAsync(new ReturnedVerseNumberVM(number, Finished: false, ShortCircuit: false));
			}
			//Logger!.LogInformation("...FinishedVM, SkipingVerseOnes: true");
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "Error in {Method}", nameof(ButtonClick));
		}
	}

}
