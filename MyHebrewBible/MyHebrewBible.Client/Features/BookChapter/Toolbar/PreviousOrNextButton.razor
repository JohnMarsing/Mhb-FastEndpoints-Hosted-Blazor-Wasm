@using MyHebrewBible.Client.Enums
@using MyHebrewBible.Client.Components.Toolbar

@if (BookAndChapter is not null)
{
	@if (!IsOnEdge)
	{
		<div class="@GlobalEnums.MediaQuery.Xs.DivClass">
			<button type="button" class="btn btn-outline-primary" title="@Title"
							@onclick="ButtonClick">
				<i class='@Icon'></i>
			</button>
		</div>

		<div class="@GlobalEnums.MediaQuery.SmOrMdOrLgOrXl.DivClass">
			<button type="button" class="btn btn-outline-primary" title="@Title"
							@onclick="ButtonClick">
				@ButtonDisplay
			</button>
		</div>
	}
	else
	{
		<OnEdgeButton />
	}
}
else
{
	<!-- This should never happen because Index checks 	if (CurrentBookAndChapter is not null) -->
	<text><span class="text-center fw-bold fst-italic">BookAndChapter is null</span></text>
}


@code {
	[Parameter, EditorRequired] public BookAndChapter? BookAndChapter { get; set; }
	[Parameter, EditorRequired] public bool IsPrevious { get; set; }
	[Parameter] public EventCallback<BookAndChapter> OnBookAndChapterSelected { get; set; }

	private string Icon => IsPrevious ?
		BibleBook.NavigationIcon.Previous
		: BibleBook.NavigationIcon.Next;

	private string Chapter => IsPrevious ? $"{Helper.HasNext}" : $"";
	private string Title => IsPrevious ? "Previous" : "Next";

	private bool IsOnEdge => IsPrevious
		? BookAndChapter?.BibleBook?.NavigationPrevious(BookAndChapter.Chapter).BibleBook is null
		: BookAndChapter?.BibleBook?.NavigationNext(BookAndChapter.Chapter).BibleBook is null;

	MarkupString Text => (MarkupString)$"<sup>{bibleBookPrevOrNext!.ButtonText}</sup> ";

	protected MarkupString ButtonDisplay =>
		new MarkupString(IsPrevious ? $"{Text} <i class='{Icon}'></i>" : $"<i class='{Icon}'></i> {Text}");

	BibleBookPrevNext? bibleBookPrevOrNext;

	protected override void OnParametersSet()
	{
		if (IsPrevious)
		{
			bibleBookPrevOrNext = BookAndChapter!.BibleBook!.NavigationPrevious(BookAndChapter.Chapter);
		}
		else
		{
			bibleBookPrevOrNext = BookAndChapter!.BibleBook!.NavigationNext(BookAndChapter.Chapter);
		}
	}


	private void ButtonClick()
	{
		BookAndChapter? bookAndChapter = new BookAndChapter(bibleBookPrevOrNext!.BibleBook, bibleBookPrevOrNext!.Chapter);
		OnBookAndChapterSelected.InvokeAsync(bookAndChapter);
	}

}
