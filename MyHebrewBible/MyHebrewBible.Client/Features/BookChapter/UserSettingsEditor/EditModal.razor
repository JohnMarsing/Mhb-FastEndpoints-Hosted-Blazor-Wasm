@using MyHebrewBible.Client.Helpers

@inject ILogger<EditModal>? Logger
@inject IToastService? Toast

<div class="@modalClass" style="display:@(modalOpen ? "block" : "none");">
	<div class="modal-dialog">
		<div class="modal-content">

			<div class="modal-header @BgAndText.Warning">
				<p class="fs-5 text-center">
					Edit User Settings
				</p>
				<button type="button" class="btn-close" @onclick="ButtonClickClose"></button>
			</div>

			<div class="modal-body">
				<ListGroup Permutations="@GetPermutationParameter()" OnPermutationSelected="ReturnedPermutation" />
			</div> <!-- modal-body -->

			<div class="modal-footer @BgAndText.DarkSubtle">
				<button @onclick="ButtonClickClose" class="btn @BtnColors.Primary @BtnSize.Md" title="call CloseModal AND EventCallback OnClose" type="button">
					Close
				</button>

				<button @onclick="ButtonClickUpdate"
								class="btn @BtnColors.Primary @BtnSize.Md" title="Update user settings and close" type="button">
					Update and Close
				</button>
			</div>

		</div>  <!-- modal-content -->
	</div> <!-- modal-dialog -->
</div> <!-- modalClass -->

@code {
	
	[Parameter, EditorRequired] public EventCallback<Enums.UserSettingsDTO> OnUserSettingsSelected { get; set; }
	[CascadingParameter] public CascadingAppState? State { get; set; }
	[Parameter, EditorRequired] public EventCallback OnClose { get; set; }

	protected Enums.Permutation InitialPermutations;
	protected Enums.Permutation CurrentPermutations;
	protected override void OnParametersSet()
	{
		try
		{
			InitialPermutations = (Enums.Permutation)State!.AppState!.BookChapterState!.GetUserSetting();
			CurrentPermutations = InitialPermutations;
			//Logger!.LogInformation("{Method}; CurrentPermutations: {int}=>{CurrentPermutations}"
			//, nameof(OnParametersSet), (int)CurrentPermutations, CurrentPermutations);
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnParametersSet));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(EditModal)}!{nameof(OnParametersSet)}");
		}
	}

	protected bool PerumationHasBeenUpdated = false;
	private Enums.Permutation GetPermutationParameter()
	{
		return PerumationHasBeenUpdated ? CurrentPermutations : InitialPermutations;
	}

	private void ReturnedPermutation(Enums.Permutation newPermutations)
	{
		//Logger!.LogInformation("{Method}, newPermutations: {Permutations}", nameof(ReturnedPermutation), newPermutations);
		CurrentPermutations = newPermutations;
		PerumationHasBeenUpdated = true;
	}

	private async Task ButtonClickUpdate()
	{
		if (InitialPermutations == CurrentPermutations)
		{
			Toast!.ShowWarning($"No changes made {Emoji.Shrug}");
		}
		else
		{
			Toast!.ShowSuccess($"User settings updated {Emoji.Happy}");
			await State!.AppState!.BookChapterState!.UpdateUserSetting(CurrentPermutations);

			var usDTO = new Enums.UserSettingsDTO(
				IsHebrewShownOnTheSide: CurrentPermutations.HasFlag(Enums.Permutation.HebrewShownOnTheSide),
				IsStandaloneAlephTavDetailsOn: CurrentPermutations.HasFlag(Enums.Permutation.StandaloneAlephTavDetailOn),
				IsParashaDividerOn: CurrentPermutations.HasFlag(Enums.Permutation.ParashaDividerOn),
				IsHebrewWordNumbersOn: CurrentPermutations.HasFlag(Enums.Permutation.HebrewWordNumbersOn));

			await OnUserSettingsSelected.InvokeAsync(usDTO);
		}

		CloseModal();
		await OnClose.InvokeAsync();
	}

	private void ButtonClickClose()
	{
		// Toast!.ShowInfo("ButtonClickClose");
		CloseModal();
		OnClose.InvokeAsync();
	}

	#region Modal Code
	bool modalOpen = true;

	string modalClass = "modal";

	void CloseModal()
	{
		modalOpen = false;
		modalClass = "modal";
	}
	#endregion
}
