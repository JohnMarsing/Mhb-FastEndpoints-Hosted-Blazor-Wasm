@using AlephTavEnums = MyHebrewBible.Client.Features.AlephTav.Enums;
@using MyHebrewBible.Client.Helpers

@if (BibleVerses != null)
{
	@* <h6 class="mt-4 mb-1">Top</h6> *@

	@foreach (var item in BibleVerses)
	{
		@if (item.DescH != "NULL")
		{
			<p class="text-danger text-center fs-4 mt-1 mb-2">@item.DescH <small class="text-secondary fs-6 fw-light"><sup>@item.BCV</sup></small></p>
		}
		@if (item.DescD != "NULL")
		{
			<p class="text-secondary fs-6 text-end mb-0"><em>@item.DescD</em></p>
		}

		<p class="fs-5">
			<a title="@item.BCV [@item.ID]" @onclick="@(e => ButtonClick(item.ID, item.Verse))">
				<sup class="btn btn-outline-primary py-0 px-1">
					<b>@item.Verse</b>
				</sup>
			</a>
			@if (item.VerseOffset != "NULL")
			{
				<sup class="text-black-50">&nbsp;@item.VerseOffset&nbsp;</sup>
			}
			else
			{
				<text>&nbsp;</text>
			}
			@((MarkupString)@item.KJV!)
			@GetSAT(item.Verse)
		</p>
	}
}

@code {
	[Parameter, EditorRequired] public List<AlephTavEnums.ChapterVerse>? SatVerseList { get; set; }
	[Parameter, EditorRequired] public List<BibleVerse>? BibleVerses { get; set; }
	[Parameter] public EventCallback<ScriptureIdAndVerseNumber> OnVerseSelected { get; set; }

	

	private void ButtonClick(long scriptureId, long verse)
	{
		OnVerseSelected.InvokeAsync(new ScriptureIdAndVerseNumber(scriptureId, verse));
	}

	protected MarkupString GetSAT(long verse)
	{
		if (SatVerseList is not null && SatVerseList.Any())
		{
			int cnt = 0;
			cnt = SatVerseList.Where(w => w.Verse == verse).Count();
			if (cnt > 0)
			{
				return new MarkupString("<span class=''><sup class='fw-bolder text-danger hebrew16'>את</sup></span>");
			}
			else
			{
				return new MarkupString("");
			}
		}
		else
		{
			return new MarkupString("");
		}
	}


}
