@* when a URL is entered directly, I get an error Cannot provide a value for property 'Api' *@
@inject ApiClient Api 
@inject ILogger<Index>? Logger

@if (verses == null)
{
	<p><em>Loading verses...</em></p>
}
else
{
	if (FocusScriptureId == 0)
	{
		<ParagraphTop TopVerses="versesTop" OnVerseSelected="ReturnedVerse" />
	}
	else
	{
		@if (versesTop is not null)
		{
			<ParagraphTop TopVerses="versesTop" OnVerseSelected="ReturnedVerse" />
		}
		else
		{
			<p><b>versesTop:</b> is null | why would this ever happen?</p>
		}

		<WordSegmentsCard ScriptureId="FocusScriptureId"
											VerseNumber="VerseNumber"
											SelectedWordCount="WordCount"
											BookAndChapter="BookAndChapter"
											OnStrongsSelected="ReturnedStrongs" />

		@if (Strongs != 0)
		{
			<HebrewTable ScriptureId="FocusScriptureId"
									 Strongs="Strongs"
									 OnHebrewSelected="ReturnedHebrew" />
		}

		@if (versesBottom is not null)
		{
			<ParagraphBottom BottomVerses="versesBottom" OnVerseSelected="ReturnedVerse" />
		}
		else
		{
			<p><b>versesBottom:</b> is null</p>
		}

	}

}


@code {
	[Parameter, EditorRequired] public BookAndChapter? BookAndChapter { get; set; }

	// When set by ReturnedVerse then the chapter is split into versesTop and versesBottom
	protected long FocusScriptureId; // = 0;

	protected long VerseRowCount; // = 0;
	protected long VerseNumber; // = 0;
	protected long TopRC = 0;
	protected long BottomRC = 0;
	protected long Strongs = 0;
	protected string? Hebrew;  // ToDo: Not fully implemented
	protected long WordCount = 0;

	public List<BibleVerse>? versesTop;
	public List<BibleVerse>? versesBottom;

	private ICollection<BibleVerse>? verses = null;

	protected string _msg = nameof(Sections);


	protected override async Task OnParametersSetAsync()
	{
		FocusScriptureId = 0;

		if (BookAndChapter is not null && BookAndChapter!.BibleBook is not null)
		{
			_msg = $"Inside {nameof(OnParametersSet)}, setting verses and VerseRowCount";
			//await Task.Delay(200);  // ToDo: comment this out in production
			verses = await Api!.GetBookChapterAsync((long)BookAndChapter!.BibleBook, (long)BookAndChapter.Chapter);
			VerseRowCount = verses.Count;
			PopulateTopAndBottom(VerseRowCount);
		}
	}

	// From the ButtonClick of either ParagraphTop or ParagraphBottom
	private void ReturnedVerse(ScriptureIdAndVerseNumber scriptureIdAndVerseNumber)
	{
		FocusScriptureId = scriptureIdAndVerseNumber.ScriptureID;
		VerseNumber = scriptureIdAndVerseNumber.VerseNumber;
		WordCount = 0;
		Strongs = 0;
		PopulateTopAndBottom(VerseNumber);
	}

	// Called by
	// - OnParametersSetAsync
	// - ReturnedVerse
	// - ReturnedStrongs only if (strongsAndWordCount.Strongs == 0)
	//
	private void PopulateTopAndBottom(long verseSplit)
	{
		if (FocusScriptureId == 0)
		{
			versesTop = verses!.Where(w => w.Verse <= verseSplit).OrderBy(o => o.Verse).ToList();
		}
		else
		{
			versesTop = verses!.Where(w => w.Verse < verseSplit).OrderBy(o => o.Verse).ToList();
			versesBottom = verses!.Where(w => w.Verse > verseSplit).OrderBy(o => o.Verse).ToList();
			BottomRC = versesBottom.Count();
		}
		TopRC = versesTop.Count();
	}

	private void ReturnedStrongs(StrongsAndWordCount strongsAndWordCount)
	{
		if (strongsAndWordCount.Strongs == 0)
		{
			FocusScriptureId = 0;
			PopulateTopAndBottom(VerseRowCount);
		}
		Strongs = strongsAndWordCount.Strongs;
		WordCount = strongsAndWordCount.WordCount;
	}

	// ToDo: Not fully implemented
	// hebrew will be added to local storage
	private void ReturnedHebrew(string hebrew)
	{
		Hebrew = hebrew;
	}

}
