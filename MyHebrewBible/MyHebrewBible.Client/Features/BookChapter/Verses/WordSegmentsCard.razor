@using MyHebrewBible.Client.Helpers

@inject ApiClient Api

@if (kjvWords == null)
{
	<p><em> KJV Words Loading...</em></p>
}
else
{
	<div class="card border-primary mb-3">
		<div class="card-header">
			<h6>
				<span class="btn btn-outline-success py-0 px-1"><b>@VerseNumber</b></span>
				<button type="button" class="mt-1 btn btn-danger btn-sm" @onclick="ButtonCloseClick">
					<i class="fas fa-times"></i>
				</button>
				<span class='float-end'>@Enums.BLB.NKJV.AnchorBCV(BookAndChapter, (int)VerseNumber)</span>
			</h6>
		</div>
		

		@if (BookAndChapter!.BibleBook!.Value > Helpers.VerseFacts.LastBookInOT)
		{
			<div class="card-body pb-0">
				<h4 class="card-title  text-center">
				<span class="badge text-bg-info">Not Yet Supported</span>
			</h4>

			<p class="fs-6 px-3 text-center">
				Currently <code>MyHebrewBible.com</code> does not support Greek Strong's lookup.
			</p>
			</div>
		}
		else
		{
			<div class="card-body pb-0">
				<p class="fs-5 px-3">
					@foreach (var item in kjvWords)
					{
						if (item.Strongs is not null)
						{
							if (item.WordCount != SelectedWordCount | SelectedWordCount == 0)
							{
								<span class="bg-info-subtle text-decoration-underline me-2" @onclick="@(e => ButtonClick((long)item.Strongs, item.WordCount))">@item.Word</span>
							}
							else
							{
								<span class="bg-info-subtle me-2"> @item.Word</span>
							}
						}
						else
						{
							<span class="bg-dark-subtle text-black-50 me-2 "> @item.Word</span>
						}
					}
				</p>
			</div>
		}

	</div>
}


@if (hebrewWords is not null)
{
	<div class="card  border-primary my-2">
		<div class="card-body">
			<h5 class="card-title ">
				@* <span>@GlobalEnums.BLB.WLC.AnchorBCV(BookAndChapter!.BibleBook!.Value, (int)item.Chapter, (int)item.Verse)</span> *@
			</h5>

			<p class="hebrew">
				@foreach (var item2 in hebrewWords)
				{
					@((MarkupString)HebrewFormat.GetSpan(item2.WordEnum, item2.Hebrew1, item2.Hebrew2, item2.Hebrew3))
					@HebrewFormat.CheckMaqqef(item2.WordEnum, item2.Hebrew1, item2.Hebrew2, item2.Hebrew3)
				}
			</p>
		</div>
	</div>
}

@code {
	[Parameter, EditorRequired] public long ScriptureId { get; set; }
	[Parameter, EditorRequired] public long VerseNumber { get; set; }
	[Parameter, EditorRequired] public long SelectedWordCount { get; set; }
	[Parameter, EditorRequired] public BookAndChapter? BookAndChapter { get; set; }
	[Parameter] public EventCallback<StrongsAndWordCount?> OnStrongsSelected { get; set; }

	private ICollection<WordPartKjv>? kjvWords = null;
	private ICollection<WordPart>? hebrewWords = null;

	protected override async Task OnParametersSetAsync()
	{
		kjvWords = await Api.GetWordPartKjvAsync(ScriptureId);
		hebrewWords = await Api!.GetWordPartByScriptureIdAsync(ScriptureId);
	}

	private void ButtonClick(long strongs, long wordCount)
	{
		OnStrongsSelected.InvokeAsync(new StrongsAndWordCount((int)strongs, wordCount));
	}

	private void ButtonCloseClick()
	{
		OnStrongsSelected.InvokeAsync(new StrongsAndWordCount(0, 0));
	}

}
