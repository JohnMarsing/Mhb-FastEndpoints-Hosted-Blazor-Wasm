@using Microsoft.AspNetCore.Components.QuickGrid
@using MyHebrewBible.Client.Enums
@using MyHebrewBible.Client.Helpers;

<div class="card border-info mt-3">

	<QuickGrid Items="@filteredItems" Pagination="@pagination">
		<TemplateColumn Title="Verse">
			<a href="javascript:void(0)" @onclick="@(() => ButtonClick(context))"
			class="">
				@context.VerseNameAbrv <i class="fas fa-level-down-alt"></i>
			</a>
			<small>@(context.HasExtraInfo ? "*" : "")</small>
		</TemplateColumn>

		@if (!IsXs)
		{
			<TemplateColumn Title="BCV">
				<a href="@($"/bookchapter/{context.BCV}")" class=""><i class="fas fa-chevron-circle-right"></i></a>
			</TemplateColumn>
		}

		<PropertyColumn Property="@(p => p.VerseDescription.Truncate(@TruncateSize))" Title="Description" Sortable="false" Align="Align.Left" />
	
		</QuickGrid>

	<div class="card-footer bg-light">
		<div class="d-flex justify-content-between">
			<div class="page-buttons">
				Page:
				@if (pagination.TotalItemCount.HasValue)
				{
					for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
					{
						var capturedIndex = pageIndex;
						<button @onclick="@(() => GoToPageAsync(capturedIndex))"
										class="@PageButtonClass(capturedIndex)"
										aria-current="@AriaCurrentValue(capturedIndex)"
										aria-label="Go to page @(pageIndex + 1)">
							@(pageIndex + 1)
						</button>
					}
				}

			</div>
			<div class="p-2">
				<select @bind="@pagination.ItemsPerPage"
								class="form-select" style="width: 5rem;" aria-label="Default select example">
					<option selected>Items</option>
					<option>5</option>
					<option>10</option>
					<option>20</option>
					<option>50</option>
				</select>
			</div>
		</div>
	</div>

</div>
@code {
	[Parameter, EditorRequired] public EventCallback<Enums.Verse> OnVerseSelected { get; set; }
	[Parameter, EditorRequired] public bool IsXs { get; set; }

	protected int TruncateSize => IsXs ? 30 : 60;
	PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

	List<Enums.Verse>? itemList;

	protected override void OnInitialized()
	{
		itemList = Enums.Verse.List.ToList();
		items = itemList.AsQueryable();
		pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
		// Set CurrentFilter
	}

	private void ButtonClick(Enums.Verse verses)
	{
		OnVerseSelected.InvokeAsync(verses);
	}

	private async Task GoToPageAsync(int pageIndex)
	{
		await pagination.SetCurrentPageIndexAsync(pageIndex);
	}

	private string? PageButtonClass(int pageIndex)
	=> pagination.CurrentPageIndex == pageIndex ? "current" : null;

	private string? AriaCurrentValue(int pageIndex)
	=> pagination.CurrentPageIndex == pageIndex ? "page" : null;

	string? CurrentFilter = "";

	IQueryable<Enums.Verse>? items;

	IQueryable<Enums.Verse>? filteredItems => items?
	.Where(x => x.VerseName.StartsWith(CurrentFilter!.ToUpper()))
	.OrderBy(o => o.Value);
	}
