@using MyHebrewBible.Client.Layout
@using MyHebrewBible.Client.Features.BookChapter.Toolbar.PreviousNext
@using MyHebrewBible.Client.Features.BookChapter.Toolbar.NumberPad
@using MyHebrewBible.Client.Enums
@using MyHebrewBible.Client.Components.Toolbar

@inject ILogger<Navbar>? Logger
@inject IToastService? Toast

<nav class="navbar navbar-expand @Helpers.BgAndText.PrimarySubtle fixed-top">

	<div class="collapse navbar-collapse justify-content-start">
		<div class="ps-1">
			<MyHebrewBible.Client.Layout.HomeButton />
		</div>
	</div>

	<div class="px-1">
		<Typeahead OnVerseSelected="ReturnedVerse" />
	</div>

	<div class="collapse navbar-collapse justify-content-end pe-1">
		<MenuTemplate Items="menuItems" OnItemSelected="ReturnedMenuItemId" />
	</div>
</nav>

@code {
	[Parameter, EditorRequired] public EventCallback<Enums.Verse> OnVerseSelected { get; set; }
	[Parameter, EditorRequired] public EventCallback<Enums.MenuItem> OnMenuItemSelected { get; set; }

	private List<Dictionary<int, string?>> menuItems = Enums.MenuItem.List
			.Select(item => new Dictionary<int, string?> { { item.Value, item.Title } })
			.ToList();

	private void ReturnedMenuItemId(int id)
	{
		if (Enums.MenuItem.TryFromValue(id, out Enums.MenuItem? menuItem))
		{
			//Logger!.LogInformation("{Method}, MenuItem: {MenuItem}", nameof(ReturnedMenuItemId), menuItem);
			OnMenuItemSelected.InvokeAsync(menuItem);
		}
		else
		{
			Logger!.LogWarning("{Method}, Invalid MenuItem: {MenuItem}", nameof(ReturnedMenuItemId), id);
			Toast!.ShowError($"{Global.ToastShowError} {nameof(Navbar)}!{nameof(ReturnedMenuItemId)} {id}");
			return;
		}
	}
	private void ReturnedVerse(Enums.Verse verse)
	{
		//Logger!.LogInformation("{Method}, Verse: {Verse}", nameof(ReturnedVerse), verse.VerseName);
		OnVerseSelected.InvokeAsync(verse);
	}
}
