@page "/Haggadah"

@using MyHebrewBible.Client.Features.Haggadah.Toolbar
@using MyHebrewBible.Client.Features.Haggadah.Toolbar.Modal
@using Page = MyHebrewBible.Client.Enums.Nav
@using MyHebrewBible.Client.Layout
@using MyHebrewBible.Client.Enums
@using MyHebrewBible.Client.Features.Haggadah.DetailContent

@inject IToastService? Toast
@inject ILogger<Index>? Logger

<PageTitle>@Page.Haggadah.Title</PageTitle>

<NavSkeleton>

	<JustifyStartRF><HomeButton /></JustifyStartRF>

	<PrevButtonDivRF>
		<PreviousOrNextButton Section="Section"
													Forward=false
													OnSectionSelected="ReturnedSection" />
	</PrevButtonDivRF>

	<ProgressBarDivRF>
		<div class="@MediaQuery.XsOrSm.DivClass">
			<Progressbar Section="Section" IsXsOrSm=true />
		</div>
		<div class="@MediaQuery.MdOrLgOrXl.DivClass">
			<Progressbar Section="Section" IsXsOrSm=false />
		</div>
	</ProgressBarDivRF>

	<NextButtonDivRF>
		<PreviousOrNextButton Section="Section"
													Forward=true
													OnSectionSelected="ReturnedSection" />
	</NextButtonDivRF>

	<JustifyEndRF>
		<ModalMenuItemButtons OnModalSelected="ReturnedModalMenuItem" />
	</JustifyEndRF>

</NavSkeleton>

<ModalSkeleton ShowMenuItem="CurrentModalToShow">
	@* Instructions *@
	<InstructionsRF>
		<Template OnClose="ReturnedCloseEvent">
			<HeaderRF>Haggadah Instructions</HeaderRF>
			<BodyRF>
				<PageInstructions />
			</BodyRF>
		</Template>

	</InstructionsRF>

	@* Appendix *@
	<TenPlaguesRF>
		<Template OnClose="ReturnedCloseEvent">
			<HeaderRF>Appendix 10 Plagues</HeaderRF>
			<BodyRF>
				<AppendixTenPlagues />
			</BodyRF>
		</Template>
	</TenPlaguesRF>

	<EasterRF>
		<Template OnClose="ReturnedCloseEvent">
			<HeaderRF>Appendix What about Easter?</HeaderRF>
			<BodyRF><AppendixEaster /></BodyRF>
		</Template>
	</EasterRF>

	<BibleVersesRF>
		<Template OnClose="ReturnedCloseEvent">
			<HeaderRF>Appendix Bible Verses</HeaderRF>
			<BodyRF><VerseIndex /></BodyRF>
		</Template>
	</BibleVersesRF>

	@* User Settings *@
	<LanguageRF>

		<Template OnClose="ReturnedCloseEvent">
			<HeaderRF>Language</HeaderRF>
			<BodyRF>
				<LanguagePickerButtons OnLanguageSelected="ReturnedLanguageMenuItem" />
			</BodyRF>
		</Template>
	</LanguageRF>

</ModalSkeleton>

<LoadingProgress>
	<div class="mt-5">
		@if (CurrentContent is not null)
		{
			if (DetailContentEng is not null && DetailContentEsp is not null)
			{
				<ContentSkeleton Content=CurrentContent Language="Language">
					<EngBody><DynamicComponent Type="DetailContentEng" /></EngBody>
					<EspBody><DynamicComponent Type="DetailContentEsp" /></EspBody>
				</ContentSkeleton>
			}
			else
			{
				<div class="card border-danger mb-3 mt-5">
					<div class="card-body text-center fs-1">DetailContentEng and/or DetailContentEsg are null <br /> (◡︵◡)</div>
				</div>
			}
		}
		else
		{
			<div class="card border-danger mb-3 mt-5">
				<div class="card-body text-center fs-1">No Haggadah Section Found <br /> (◡︵◡)</div>
			</div>
		}
	</div>

</LoadingProgress>

@code {
	[CascadingParameter] public CascadingAppState? State { get; set; }


	protected int Section;
	protected Enums.Content? CurrentContent;
	protected Enums.DisplayLanguage? Language;

	protected override void OnInitialized()
	{
		Language = GetLanguageState();
		Section = 1;
		//Logger!.LogInformation("OnParametersSet: Language: {Language}; Section: {Section}", Language, Section);
		CurrentContent = Enums.Content.List.FirstOrDefault(w => w.Value == Section);
		SetDetail();
	}

	protected Type? DetailContentEng;
	protected Type? DetailContentEsp;

	private void SetDetail()
	{
		//Logger!.LogInformation("{Method}, EngPath: {EngPath}, EspPath: {EspPath}"
		//	, nameof(SetDetail), Constants.DynamicComponentPathEng, Constants.DynamicComponentPathEsp);
		try
		{
			DetailContentEng = Type.GetType($"{Constants.DynamicComponentPathEng}.{CurrentContent!.Name}");
			DetailContentEsp = Type.GetType($"{Constants.DynamicComponentPathEsp}.{CurrentContent!.Name}");

			if (DetailContentEng is null)
			{
				Logger!.LogWarning("{Method}, DetailContentEng IS NULL; CurrentContent: {CurrentContent}"
					, nameof(SetDetail), CurrentContent);
				Toast!.ShowError($"{Global.ToastShowError} {nameof(Index)}!{nameof(OnParametersSetAsync)}");
				return;
			}

			if (DetailContentEsp is null)
			{
				Logger!.LogWarning("{Method}, DetailContentEsp IS NULL; CurrentContent: {CurrentContent}"
					, nameof(SetDetail), CurrentContent);
				Toast!.ShowError($"{Global.ToastShowError} {nameof(Index)}!{nameof(OnParametersSetAsync)}");
				return;
			}

			//Logger!.LogInformation("{Method}, DetailContentEng: {DetailContentEng}, DetailContentEsp: {DetailContentEsp}"
			//	, nameof(SetDetail), DetailContentEng?.ToString() ?? "null", DetailContentEsp?.ToString() ?? "null");
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(SetDetail));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(Index)}!{nameof(OnParametersSetAsync)}");
		}
	}

	// Called by: OnInitialized
	private Enums.DisplayLanguage GetLanguageState()
	{
		int id = State!.AppState!.HaggadahState!.Get();

		Enums.DisplayLanguage? _language;
		if (Enums.DisplayLanguage.TryFromValue(id, out _language))
		{
			return Enums.DisplayLanguage.FromValue(id);
		}
		else
		{
			return Enums.DisplayLanguage.English;
		}
	}

	// Called by: PreviousOrNextButton
	private void ReturnedSection(int section)
	{
		Section = section;
		CurrentContent = Enums.Content.List.FirstOrDefault(w => w.Value == Section);
		SetDetail();
		// save to local storage
	}

	#region MenuTemplate and Skeleton


	// Called by: <Skeleton><LanguageRF><Template><BodyRF><LanguagePickerButtons OnLanguageSelected="ReturnedLanguageMenuItem" />
	private async Task ReturnedLanguageMenuItem(Enums.DisplayLanguage item)
	{
		Language = item;
		await State!.AppState!.HaggadahState!.UpdateLanguage(item);
		CurrentModalToShow = null;
	}

	protected Enums.ModalMenuItem? CurrentModalToShow { get; set; }

	private void ReturnedModalMenuItem(Enums.ModalMenuItem modalMenuItem)
	{
		CurrentModalToShow = modalMenuItem;
	}

	// Called by: <Skeleton> 4 times
	private void ReturnedCloseEvent()
	{
		CurrentModalToShow = null;
		//Logger!.LogInformation("{Method}, CurrentModalToShow set to null", nameof(ReturnedCloseEvent));
	}

	#endregion

}
