@page "/Parasha/{Id:int}/{Slug}"
@using MyHebrewBible.Client.Enums
@using MyHebrewBible.Client.Features.Parasha.Enums
@using MyHebrewBible.Client.Features.Parasha.Toolbar

@inject ILogger<Index>? Logger
@inject IToastService? Toast

<PageTitle>@Nav.Parasha.Title @PageTitleDetail</PageTitle>

<LoadingProgress>

	<Buttons CurrentReading="CurrentReading" OnTriennialSelected="ReturnedTriennial" />

	@if (CurrentReading is not null)
	{
		<br />  @* ToDo: Fix this CSS HACK *@
		<div class="card border-primary mb-3 mt-5">
			<div class="@GlobalEnums.MediaQuery.XsOrSm.DivClass">
				<Header CurrentReading="CurrentReading" MediaQuery="@GlobalEnums.MediaQuery.XsOrSm" />
			</div>
			<div class="@GlobalEnums.MediaQuery.MdOrLgOrXl.DivClass">
				<Header CurrentReading="CurrentReading" MediaQuery="@GlobalEnums.MediaQuery.MdOrLgOrXl" />
			</div>
		</div>

		<TorahHaftorahBrit CurrentReading="CurrentReading" CurrentPermutations="CurrentPermutations" />
	}
	else
	{
		<br />  @* ToDo: Fix this CSS HACK *@
		<div class="card border-danger mb-3 mt-5">
			<div class="card-body text-center fs-1">No Parasha Found <br /> (◡︵◡)</div>
		</div>
	}

</LoadingProgress>

@code {
	[Parameter, EditorRequired] public int Id { get; set; }
	[Parameter] public string? Slug { get; set; } // not used

	[CascadingParameter] public CascadingAppState? CascadingAppState { get; set; }

	protected Permutation CurrentPermutations;

	public Triennial? CurrentReading { get; set; }

	private string? PageTitleDetail = string.Empty;

	protected override void OnInitialized()
	{
		//Logger!.LogInformation("{Method}, Id: {Id}", nameof(OnInitialized), Id);
		try
		{
			CurrentReading = GetCurrentReadingViaRoutes(Id);

			if (CurrentReading is not null)
			{
				PageTitleDetail = CurrentReading.TorahAbrv;
			}
			else
			{
				Toast!.ShowWarning($"Parasha Id {Id} not found; inside: {nameof(Index)}!{nameof(OnInitialized)}");
			}
			CurrentPermutations = GetCurrentPermutation();
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnInitialized));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(Index)}!{nameof(OnInitialized)}");
		}
	}

	private Triennial? GetCurrentReadingViaRoutes(int id)
	{
		Triennial? _reading = Triennial.List.Where(w => w.Value == id).SingleOrDefault();
		// _reading = null; Test for when the id is not found
		if (_reading is null)
		{
			//Logger!.LogWarning("{id}; _reading is null", id);
			//Toast!.ShowWarning($"Current reading is not found; id: {id}");
			return null;
		}
		else
		{
			//Logger!.LogInformation("{Method}, _reading: {_reading}", nameof(GetCurrentReadingViaRoutes), _reading);
			return _reading;
		}
	}

	private Permutation GetCurrentPermutation()
	{
		int _permutation = CascadingAppState!.AppState!.ParashaState!.Get();
		//Logger!.LogInformation("{Method}, _permutation: {_permutation}", nameof(GetCurrentPermutation), _permutation);
		return (Permutation)_permutation;
	}


	private void ReturnedTriennial(Triennial triennial)
	{
		CurrentReading = triennial;
		if (CurrentReading is not null) { PageTitleDetail = CurrentReading.TorahAbrv; }
	}
}
