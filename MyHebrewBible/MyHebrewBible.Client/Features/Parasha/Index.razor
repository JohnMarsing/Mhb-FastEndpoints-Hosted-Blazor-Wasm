@page "/Parasha/{Id:int}/{Slug}"
@using MyHebrewBible.Client.Enums

@using MyHebrewBible.Client.Features.Parasha.Enums
@using MyHebrewBible.Client.Features.Parasha.Toolbar

@inject ILogger<Index>? Logger
@inject IToastService? Toast

<PageTitle>@Nav.Parasha.Title @PageTitleDetail</PageTitle>

<Buttons CurrentReading="CurrentReading" OnTriennialSelected="ReturnedTriennial" />

@if (CurrentReading is not null)
{
	<br />
	<div class="card border-primary mb-3 mt-5">
		@*
	<div class="card-header">
	<h2>Current Parasha</h2>
	</div>
	*@
		<div class="@GlobalEnums.MediaQuery.XsOrSm.DivClass">
			<Header CurrentReading="CurrentReading" MediaQuery="@GlobalEnums.MediaQuery.XsOrSm" />
		</div>

		<div class="@GlobalEnums.MediaQuery.MdOrLgOrXl.DivClass">
			<Header CurrentReading="CurrentReading" MediaQuery="@GlobalEnums.MediaQuery.MdOrLgOrXl" />
		</div>

	</div>

	@foreach (var item in ShowSection.List.OrderBy(o => o.Value))
	{
		<div class="card bg-light mb-3">
			<div class="card-header">
				<div class="d-flex justify-content-between">
					<div>
						<h3 class="@item!.HeaderColor"><b>@item!.Title</b></h3>
					</div>

					<div>
						<ShowSectionButtons ShowSection="item"
																CurrentPermutations="CurrentPermutations"
																OnShowSectionSelected="ReturnedPermutation" />

					</div>
				</div>

				<LoadingProgress>

					@if (CurrentPermutations.HasFlag(Permutation.Torah) && item == ShowSection.Torah)
					{
						<TorahVerses CurrentReading="CurrentReading" />
					}

					@if (CurrentPermutations.HasFlag(Permutation.Haftorah) && item == ShowSection.Haftorah)
					{
						<HaftorahVerses CurrentReading="CurrentReading" />
					}

					@if (CurrentPermutations.HasFlag(Permutation.Brit) && item == ShowSection.Brit)
					{
						<BritVerses CurrentReading="CurrentReading" />
					}

				</LoadingProgress>

			</div>
		</div>
	}

}
else
{
	<p>CurrentReading IS null!</p>
}

@code {
	[Parameter, EditorRequired] public int Id { get; set; }
	[Parameter] public string? Slug { get; set; } // not used

	[CascadingParameter] public CascadingAppState? CascadingAppState { get; set; }
	protected Permutation CurrentPermutations;

	public Triennial? CurrentReading { get; set; }

	private string? PageTitleDetail = string.Empty;

	protected override void OnInitialized()
	{
		Logger!.LogInformation("{Method}, Id: {Id}", nameof(OnInitialized), Id);
		CurrentReading = GetCurrentReadingViaRoutes(Id);

		if (CurrentReading is not null) { PageTitleDetail = CurrentReading.TorahAbrv; }

		CurrentPermutations = GetCurrentPermutation();
	}

	private Triennial? GetCurrentReadingViaRoutes(int id)
	{
		Triennial? _reading = Triennial.List.Where(w => w.Value == id).SingleOrDefault();

		if (_reading is null)
		{
			Logger!.LogWarning("{id}; _reading is null", id);
			Toast!.ShowWarning($"Current reading is not found; id: {id}");
			return null;
		}
		else
		{
			return _reading;
		}
	}

	private Permutation GetCurrentPermutation()
	{
		int _permutation = CascadingAppState!.AppState!.ParashaState!.Get();
		//Logger!.LogInformation("{Method}, _permutation: {_permutation}", nameof(GetCurrentPermutation), _permutation);
		return (Permutation)_permutation;
	}

	private async Task ReturnedPermutation(Permutation permutation)
	{
		CurrentPermutations = permutation;
		//Logger!.LogInformation("{Method} CurrentPermutations: {CurrentPermutations}", nameof(ReturnedPermutation), CurrentPermutations);
		await CascadingAppState!.AppState!.ParashaState!.Update(CurrentPermutations);
	}

	private void ReturnedTriennial(Triennial triennial)
	{
		CurrentReading = triennial;
		if (CurrentReading is not null) { PageTitleDetail = CurrentReading.TorahAbrv; }
	}
}
