@page "/Parasha"

@using MyHebrewBible.Client.Enums
@using ParashaEnums = MyHebrewBible.Client.Features.Parasha.Enums

@inject ILogger<Index>? Logger
@inject IToastService? Toast

<PageHeader PageEnum="@MyHebrewBible.Client.Enums.Nav.Parasha" BorderCSS="" />

@if (CurrentReading is not null)
{
	<div class="card border-primary mb-3">
		<div class="card-header">
			<h2>Current Parasha</h2>
		</div>

		<div class="@MediaQuery.XsOrSm.DivClass">
			<Header CurrentReading="CurrentReading" MediaQuery="@MediaQuery.XsOrSm" />
		</div>

		<div class="@MediaQuery.MdOrLgOrXl.DivClass">
			<Header CurrentReading="CurrentReading" MediaQuery="@MediaQuery.MdOrLgOrXl" />
		</div>

	</div>

	@foreach (var item in ParashaEnums.ShowSection.List.OrderBy(o => o.Value))
	{
		<div class="card bg-light mb-3">
			<div class="card-header">
				<div class="d-flex justify-content-between">
					<div>
						<h3 class="@item!.HeaderColor"><b>@item!.Title</b></h3>
					</div>

					<div>
						<ShowSectionButtons ShowSection="item"
																CurrentPermutations="CurrentPermutations"
																OnShowSectionSelected="ReturnedPermutation" />

					</div>
				</div>

				@if (CurrentPermutations.HasFlag(ParashaEnums.Permutation.Torah) && item == ParashaEnums.ShowSection.Torah)
				{
					<TorahVerses CurrentReading="CurrentReading" />
				}

				@if (CurrentPermutations.HasFlag(ParashaEnums.Permutation.Haftorah) && item == ParashaEnums.ShowSection.Haftorah)
				{
					<HaftorahVerses CurrentReading="CurrentReading" />
				}

				@if (CurrentPermutations.HasFlag(ParashaEnums.Permutation.Brit) && item == ParashaEnums.ShowSection.Brit)
				{
					<BritVerses CurrentReading="CurrentReading" />
				}

			</div>
		</div>
	}

}
else
{
	<p>CurrentReading IS null!</p>
}

@code {
	public ParashaEnums.Triennial? CurrentReading { get; set; }

	[CascadingParameter] public CascadingAppState? CascadingAppState { get; set; }
	protected ParashaEnums.Permutation CurrentPermutations;

	protected override void OnInitialized()
	{
		CurrentReading = GetCurrentReading($"{nameof(Index)}!{nameof(OnInitialized)}");
		CurrentPermutations = GetCurrentPermutation();
	}

	private ParashaEnums.Triennial? GetCurrentReading(string calledBy)
	{
		ParashaEnums.Triennial? _reading =
			ParashaEnums.Triennial.List
			.Where(w => w.Date == ParashaEnums.Constants.GetNextShabbatDate())
			.SingleOrDefault();

		if (_reading is null)
		{
			Logger!.LogWarning("{CalledBy}; _reading is null", calledBy);
			Toast!.ShowWarning($"Current reading is not found; called by: {calledBy}");

			//ToDo: maybe I should set it to a default e.g. Gen 1:1
			return null;
		}
		else
		{
			return _reading;
		}
	}

	private ParashaEnums.Permutation GetCurrentPermutation()
	{
		int _permutation = CascadingAppState!.AppState!.ParashaState!.Get();
		//Logger!.LogInformation("{Method}, _permutation: {_permutation}", nameof(GetCurrentPermutation), _permutation);
		return (ParashaEnums.Permutation)_permutation;
	}


	private async Task ReturnedPermutation(ParashaEnums.Permutation permutation)
	{
		CurrentPermutations = permutation;
		//Logger!.LogInformation("{Method} CurrentPermutations: {CurrentPermutations}", nameof(ReturnedPermutation), CurrentPermutations);
		await CascadingAppState!.AppState!.ParashaState!.Update(CurrentPermutations);
	}

}
