@page "/Parasha"

@using MyHebrewBible.Client.Enums
@using MyHebrewBible.Client.Features.Parasha.TopSection
@using MyHebrewBible.Client.Features.Parasha.DetailSection
@using MyHebrewBible.Client.Features.Parasha.State

@inject ILogger<Index>? Logger
@inject IToastService? Toast

<PageHeader PageEnum="@MyHebrewBible.Client.Enums.Nav.Parasha" BorderCSS="" PageTitle="@PageTitle" />


@if (CurrentReading is not null)
{
	<HeaderOrGrid CurrentReading="CurrentReading" />

	<Verses CurrentReading="CurrentReading"
												SubTitle="@CurrentReading!.Torah"
												LocalStorage="Enums.LocalStorage.Torah"
												VerseGroup="Enums.VerseGroup.Torah" />

	<Verses CurrentReading="CurrentReading"
												SubTitle="@CurrentReading!.Haftorah"
												LocalStorage="Enums.LocalStorage.Haftorah"
												VerseGroup="Enums.VerseGroup.Haftorah" />

	<Verses CurrentReading="CurrentReading"
												SubTitle="@CurrentReading!.Brit"
												LocalStorage="Enums.LocalStorage.Brit"
												VerseGroup="Enums.VerseGroup.Brit" />
}
else
{
	<p>CurrentReading IS null!</p>
}

@code {
	public Enums.Triennial? CurrentReading { get; set; }
	protected string? PageTitle;

	protected override void OnInitialized()
	{
		CurrentReading = Enums.Triennial.List
		.Where(w => w.Date == Enums.Constants.GetNextShabbatDate())  // .GetNextShabbatDate(OverRideWithSaturday6PM:true)) or .GetNextShabbatDate())
		.SingleOrDefault();

		if (CurrentReading is null)
		{
			Logger!.LogWarning("{Class}!{Method}; CurrentReading is null", nameof(Index), nameof(OnInitialized));
			Toast!.ShowWarning($"Current reading is not found; inside {nameof(Index)}");
		}
		else
		{
			PageTitle = $"{CurrentReading.ParashaName} {CurrentReading.TorahAbrv}";
		}
	}

}
