@page "/Parasha"

@using MyHebrewBible.Client.Enums
@using MyHebrewBible.Client.Features.Parasha.TopSection

@inject IToastService? Toast

<PageHeader PageEnum="@MyHebrewBible.Client.Enums.Nav.Parasha" BorderCSS="" />

@if (TorahBookFilter is not null)
{
	<div class="card border-primary mb-3">

		<div class="card-header">
			<div class="d-flex justify-content-between">
				<h2>  @(ToggleValueShowGrid ? "Parasha Grid" : "Current Parasha")  </h2>
				<div>
					<ShowHideToggle ToggleValue="ToggleValueShowGrid"
													OnToggleSelected="ReturnedHeaderToggle" />
				</div>

			</div>
		</div>

		@if (ToggleValueShowGrid)
		{
			<Grid TorahBookFilter="TorahBookFilter" />
		}
		else
		{
			<Header CurrentAhavta="CurrentAhavta" />
		}
	</div>
}

@if (CurrentAhavta is not null)
{
	<div class="card bg-light mb-3">
		<div class="card-header">
			<div class="d-flex justify-content-between">
				<div>
					<h3 class="@Enums.VerseGroup.Torah.HeaderColor"><b>@Enums.VerseGroup.Torah.Title</b> </h3>
					<h6>@CurrentAhavta.Torah</h6>
				</div>
				<div>
					<VerseGroupShowHideToggle ToggleValue="ToggleValueTorah"
																		VerseGroup="Enums.VerseGroup.Torah"
																		OnToggleSelected="ReturnedToggle" />
				</div>
			</div>
		</div>

		@if (ToggleValueTorah)
		{
			<div class="card-body">
				<VerseParagraph VerseParagraphRange="TorahVerses" />
			</div>
		}
	</div>
}


@if (HaftorahVerses is not null && HaftorahVerses.Any())
{
	<div class="card bg-light mb-3">
		<div class="card-header">
			<div class="d-flex justify-content-between">

				<div>
					<h3 class="@Enums.VerseGroup.Haftorah.HeaderColor"><b>@Enums.VerseGroup.Haftorah.Title</b></h3>
					<h6>@CurrentAhavta!.Haftorah</h6>
				</div>

				<div>
					<VerseGroupShowHideToggle ToggleValue="ToggleValueHaftorah"
																		VerseGroup="Enums.VerseGroup.Haftorah"
																		OnToggleSelected="ReturnedToggle" />
				</div>
			</div>
		</div>

		@if (ToggleValueHaftorah)
		{
			@foreach (var item in HaftorahVerses)
			{
				<div class="card-body">
					<VerseParagraph VerseParagraphRange="item" />
				</div>
			}
		}
	</div>
}


@if (BritVerses is not null && BritVerses.Any())
{
	<div class="card bg-light mb-3">
		<div class="card-header">
			<div class="d-flex justify-content-between">
				
				<div>
					<h3 class="@Enums.VerseGroup.Brit.HeaderColor"><b>@Enums.VerseGroup.Brit.Title</b></h3>
					<h6>@CurrentAhavta!.Brit</h6>
				</div>
				
				<div>
					<VerseGroupShowHideToggle ToggleValue="ToggleValueBrit"
																		VerseGroup="Enums.VerseGroup.Brit"
																		OnToggleSelected="ReturnedToggle" />
				</div>
			</div>
		</div>

		@if (ToggleValueBrit)
		{
			@foreach (var item in BritVerses)
			{
				<div class="card-body">
					<VerseParagraph VerseParagraphRange="item" />
				</div>
			}
		}
	</div>
}



@code {
	bool ToggleValueShowGrid = false;
	bool ToggleValueTorah = false;
	bool ToggleValueHaftorah = false;
	bool ToggleValueBrit = false;

	public Enums.Ahavta? CurrentAhavta { get; set; }

	private VerseParagraphRange? TorahVerses;
	private List<VerseParagraphRange>? HaftorahVerses;
	private List<VerseParagraphRange>? BritVerses;

	public TorahBookFilter? TorahBookFilter { get; set; }

	protected override void OnInitialized()
	{
		CurrentAhavta = Enums.Ahavta.List.Where(w => w.Date == Enums.Constants.GetNextShabbatDate()).SingleOrDefault();
		if (CurrentAhavta is null)
		{
			Toast!.ShowWarning($"Current Ahavta is not found; inside {nameof(Index)}");
		}
		else
		{
			TorahVerses = new VerseParagraphRange(
				CurrentAhavta.TorahVerse.BegId, CurrentAhavta.TorahVerse.EndId
				, CurrentAhavta.TorahVerse.BibleBook.Title + CurrentAhavta.TorahVerse.ChapterVerse);

			TorahBookFilter = CurrentAhavta.TorahBookFilter;

			if (CurrentAhavta.HaftorahVerses is not null)
			{
				if (CurrentAhavta.HaftorahVerses.Any())
				{
					HaftorahVerses = new List<VerseParagraphRange>();
					foreach (var item in CurrentAhavta.HaftorahVerses)
					{
						HaftorahVerses.Add(new VerseParagraphRange(item.BegId, item.EndId, item.BibleBook.Title + " " + item.ChapterVerse));
					}
				}
			}

			if (CurrentAhavta.BritVerses is not null)
			{
				if (CurrentAhavta.BritVerses.Any())
				{
					BritVerses = new List<VerseParagraphRange>();
					foreach (var item in CurrentAhavta.BritVerses)
					{
						BritVerses.Add(new VerseParagraphRange(item.BegId, item.EndId, item.BibleBook.Title + " " + item.ChapterVerse));
					}
				}
			}


		}
	}

	private void ReturnedHeaderToggle(bool headerToggle)
	{
		ToggleValueShowGrid = headerToggle;
	}

	private void ReturnedToggle(VerseGroupShowHideToggleVM vm)
	{
		vm.VerseGroup!
		.When(Enums.VerseGroup.Torah).Then(() => ToggleValueTorah = vm.ToggleValue)
		.When(Enums.VerseGroup.Haftorah).Then(() => ToggleValueHaftorah = vm.ToggleValue)
		.When(Enums.VerseGroup.Brit).Then(() => ToggleValueBrit = vm.ToggleValue);
	}
}
