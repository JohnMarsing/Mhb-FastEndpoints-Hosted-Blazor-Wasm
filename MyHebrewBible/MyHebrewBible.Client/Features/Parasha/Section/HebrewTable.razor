@using MyHebrewBible.Client.Helpers

@inject ApiClient Api
@inject IToastService? Toast
@inject ILogger<HebrewTable>? Logger

<LoadingComponent IsLoading="hebrewWords==null" TurnSpinnerOff="TurnSpinnerOff">

	<div class="mx-1">
		<table class="@HeaderCSS">
			<thead class="@TheadCSS">
				<tr>
					<th class="">KJV</th>
					<th class="">Strong&apos;s</th>
					<th class="">
						<span class="float-end">Hebrew</span>
					</th>
					<th class="">#</th>
					<th class="text-center text-danger"><i class="fas fa-exclamation"></i></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in hebrewWords!)
				{
					<tr class="@(item.Strongs != 0 && item.Strongs == StrongsAndWordCount!.Strongs ? "table-success" : "")">
						<td class="">@item.KjvWord</td>
						<td class="">@((MarkupString)@item.StrongsH) </td>
						<td class="hebrew16">
							@((MarkupString)HebrewFormat.GetSpan(item.WordEnum, item.Hebrew1, item.Hebrew2, item.Hebrew3))
							@HebrewFormat.CheckMaqqef(item.WordEnum, item.Hebrew1, item.Hebrew2, item.Hebrew3)
						</td>
						<td> <sup>@item.WordCount</sup></td>
						<td class="text-center">
							<button type="button" class="mt-1 btn btn-outline-success btn-sm" title="Add hebrew to the MHB translation (•‿•)"
											@onclick="@(e => ButtonAddClick(item.Hebrew1))">
								<small><i class="fas fa-plus"></i></small>
							</button>
						</td>
					</tr>
				}
			</tbody>
			@* 				<tfoot>	<tr class="@TableFooterColor">@TableFooter</tr>	</tfoot> *@
		</table>
	</div>

</LoadingComponent>

@* @if (BookAndChapter!.BibleBook!.Value > Helpers.VerseFacts.LastBookInOT)   *@


@code {

	[Parameter, EditorRequired] public long ScriptureId { get; set; }
	[Parameter, EditorRequired] public StrongsAndWordCount? StrongsAndWordCount { get; set; }
	[Parameter] public EventCallback<StrongsAndWordCount?> OnStrongsSelected { get; set; }

	protected bool TurnSpinnerOff = false;

	private ICollection<WordPart>? hebrewWords = null;
	protected override async Task OnParametersSetAsync()
	{

		try
		{
			hebrewWords = await Api!.GetWordPartByScriptureIdAsync(ScriptureId);
			if (!hebrewWords.Any()) { Toast!.ShowWarning($"No records found for ScriptureId: {ScriptureId}"); }
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnParametersSetAsync));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(HebrewTable)}!{nameof(OnParametersSetAsync)}");
		}
		finally
		{
			TurnSpinnerOff = true;
		}

	}

	private void ButtonAddClick(string hebrew)
	{
		Toast!.ShowWarning("Not yet implemented (◡︵◡)");
		//OnHebrewSelected.InvokeAsync(hebrew);
	}

	protected string HeaderCSS { get; set; } = "table table-condensed table-sm";
	public string TheadCSS { get; set; } = "table-light";

}
