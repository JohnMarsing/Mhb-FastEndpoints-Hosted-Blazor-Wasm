@using MyHebrewBible.Client.Features.Parasha.Enums
@using MyHebrewBible.Client.Features.Parasha.Summary;
@using MyHebrewBible.Client.Features.Parasha.Detail;

@inject ILogger<Sections>? Logger

@foreach (var item in ParashaVerses!.OrderBy(o => o.ID))
{
	<TitleSubtitle Title="@item.DescH" Subtitle="@item.DescD" />

	if (FocusScriptureId == 0)
	{
		<Paragraph BookAndChapter="GetBookAndChapter(item.BookID, item.Chapter)" 
							 Verse="item"
							 OnVerseSelectedPassThrough="ReturnedVerse" />

		@if (item.WordPartList.Count() > 0)
		{
			<SatAndSurroundingWords SurroundingWords="item.WordPartList.ToList()" />
		}
	}
	else
	{
		if (item.ID == FocusScriptureId)
		{
			<Card BookAndChapter="GetBookAndChapter(item.BookID, item.Chapter)"
						Verse="item"
						ScriptureId="FocusScriptureId"
						WordSelected="CurrentWordSelected"
						OnClose="ReturnedCloseEvent"
						OnWordSelected="ReturnedWord" />
		}
		else
		{
			<Paragraph BookAndChapter="GetBookAndChapter(item.BookID, item.Chapter)"
								 Verse="item"
								 OnVerseSelectedPassThrough="ReturnedVerse" />
		}
	}
}

@code {

	[Parameter, EditorRequired] public List<ParashaWithAT>? ParashaVerses { get; set; }
	[Parameter, EditorRequired] public ShowSection? ShowSection { get; set; }

	protected long FocusScriptureId;
	protected long VerseNumber;

	protected BookAndChapter GetBookAndChapter(long bookId, long chapter)
	{
		//Logger!.LogInformation("{Method}, B/C: {bookId}/{chapter}", nameof(GetBookAndChapter), bookId, chapter);
		return new BookAndChapter(MyHebrewBible.Client.Enums.BibleBook.FromValue(LongToInt(bookId)), LongToInt(chapter));
	}

	private int LongToInt(long l)
	{
		return (l <= int.MaxValue && l >= int.MinValue) ? (int)l : 1;
	}

	private void ReturnedVerse(long scriptureId)
	{
		FocusScriptureId = scriptureId;
	}

	WordSelected? CurrentWordSelected = new WordSelected(0, 0);
	private void ReturnedWord(WordSelected wordSelected)
	{
		CurrentWordSelected = wordSelected;
	}

	private void ReturnedCloseEvent()
	{
		FocusScriptureId = 0;
	}
}
