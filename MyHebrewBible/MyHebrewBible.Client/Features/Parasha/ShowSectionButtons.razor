@using MyHebrewBible.Client.Features.Parasha.Enums

@* @inject ILogger<ShowSectionButtons>? Logger *@

@if (CurrentPermutations.HasFlag(ShowSection!.Permutation))
{
	<button @onclick="@(() => OnButtonSubtractClicked(ShowSection))"
					class="btn @ShowSection.ButtonColor btn-lg">
		Hide @ShowSection.ButtonLabel <i class="fas fa-chevron-up"></i>
	</button>
}
else
{
	<button @onclick="@(() => OnButtonAddClicked(ShowSection))"
					class="btn @ShowSection.ButtonColor btn-lg">
		Show @ShowSection.ButtonLabel <i class="fas fa-chevron-down"></i>
		@* @ButtonTextPrefix @ButtonText	<i class="fas @ChevronIcon"></i> *@
	</button>
}


@* 
ToDo: This could be combined into one button
<button class="btn @VerseGroup!.ButtonColor" @onclick="ButtonClicked" title="">
	@ButtonTextPrefix @ButtonText	<i class="fas @ChevronIcon"></i> 
</button>
*@


@code {
	[Parameter, EditorRequired] public ShowSection? ShowSection { get; set; }
	[Parameter, EditorRequired] public Permutation CurrentPermutations { get; set; }
	[Parameter] public EventCallback<Permutation> OnShowSectionSelected { get; set; }

	/*
	ToDo: This could be combined into one button

	private string ButtonTextPrefix => ToggleValue ? "Hide " : "Show ";
	private string ChevronIcon => ToggleValue ? " fa-chevron-up" : " fa-chevron-down";

	private void ButtonClicked() => OnToggleSelected.InvokeAsync(new ShowHideToggleVM(!ToggleValue, VerseGroup!));
	*/

	private void OnButtonAddClicked(ShowSection showSection)
	{
		CurrentPermutations = CurrentPermutations | showSection.Permutation;
		OnShowSectionSelected.InvokeAsync(CurrentPermutations);
	}

	private void OnButtonSubtractClicked(ShowSection showSection) 
	{ 
		CurrentPermutations = CurrentPermutations & ~showSection.Permutation;
		OnShowSectionSelected.InvokeAsync(CurrentPermutations);
	}

}
