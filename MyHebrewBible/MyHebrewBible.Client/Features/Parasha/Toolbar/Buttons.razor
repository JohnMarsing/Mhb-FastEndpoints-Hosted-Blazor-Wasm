@using MyHebrewBible.Client.Features.Parasha.Enums
@using MyHebrewBible.Client.Enums
@using MyHebrewBible.Client.Components.Toolbar

@inject ILogger<Buttons>? Logger
@inject IToastService? Toast
@inject NavigationManager NavigationManager

<nav class="navbar navbar-expand bg-primary-subtle fixed-top">

	<div class="collapse navbar-collapse justify-content-start">
		<div class="ps-1">
			<MyHebrewBible.Client.Layout.HomeButton />
		</div>
	</div>

	@if (CurrentReading is null)
	{
		<text><span class="text-center fw-bold fst-italic">CurrentReading is null</span></text>
	}
	else
	{
		<div class="collapse navbar-collapse justify-content-center">
			@if (CurrentReading.HasPrevious)
			{
				<div class="pe-2">
					<PreviousOrNextButton PrevNextVM="CurrentReading.PreviousVM"
																OnTriennialSelected="ReturnedPrevNextVM" />
				</div>
			}
			else
			{
				<div class="pe-2">
					<OnEdgeButton />
				</div>
			}

			<div class="px-1">
				<h4 class=""><i class="@Nav.Parasha.Icon"></i>&nbsp;@Nav.Parasha.Title</h4>
			</div>

			@if (CurrentReading.HasNext)
			{
				<div class="ps-2">
					<PreviousOrNextButton PrevNextVM="CurrentReading.NextVM"
																OnTriennialSelected="ReturnedPrevNextVM" />
				</div>
			}
			else
			{
				<div class="ps-2">
					<OnEdgeButton />
				</div>
			}


		</div>
	}
	<div class="collapse navbar-collapse justify-content-end pe-1">
		<MenuTemplate Items="menuItems" OnItemSelected="ReturnedMenuItemId" />
	</div>
</nav>


@code {
	[Parameter, EditorRequired] public Triennial? CurrentReading { get; set; }
	[Parameter, EditorRequired] public EventCallback<Triennial> OnTriennialSelected { get; set; }
	[Parameter, EditorRequired] public EventCallback<Enums.MenuItem> OnMenuItemSelected { get; set; }

	private void ReturnedPrevNextVM(PrevNextVM prevNextVM)
	{
		NavigationManager!.NavigateTo(prevNextVM.Url);
		OnTriennialSelected.InvokeAsync(prevNextVM.Triennial);
	}

	private List<Dictionary<int, string?>> menuItems = Enums.MenuItem.List
				.Select(item => new Dictionary<int, string?> { { item.Value, item.Title } })
				.ToList();

	private void ReturnedMenuItemId(int id)
	{
		if (Enums.MenuItem.TryFromValue(id, out Enums.MenuItem? menuItem))
		{
			//Logger!.LogInformation("{Method}, MenuItem: {MenuItem}", nameof(ReturnedMenuItemId), menuItem);
			OnMenuItemSelected.InvokeAsync(menuItem);
		}
		else
		{
			Logger!.LogWarning("{Method}, Invalid MenuItem: {MenuItem}", nameof(ReturnedMenuItemId), id);
			Toast!.ShowError($"{Global.ToastShowError} {nameof(Buttons)}!{nameof(ReturnedMenuItemId)} {id}");
			return;
		}
	}
}
