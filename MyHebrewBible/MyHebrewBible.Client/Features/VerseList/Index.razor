@page "/verselist/{bookid:int}/{chapter:int}/{begverse:int}/{endverse:int}"

@using MyHebrewBible.Client.Components.BibleLookup
@using MyHebrewBible.Client.Components.BibleLookup.Toolbar;
@using MyHebrewBible.Client.State.VerseList
@using MyHebrewBible.Client.Features.VerseList.Section

@inject ILogger<Index>? Logger
@inject IToastService? Toast
@inject NavigationManager NavigationManager

<PageTitle>@PageTitle</PageTitle>

@if (CurrentBookChapterVerse is not null)
{
	<div class="@GlobalEnums.MediaQuery.Xs.DivClass">
		<NavbarVerseList CurrentBookChapterVerse="CurrentBookChapterVerse"
										 OnBookChapterVerseSelected="ReturnedBookChapterVerse"
										 MediaQuery="GlobalEnums.MediaQuery.Xs" />
	</div>
	<div class="@GlobalEnums.MediaQuery.Sm.DivClass">
		<NavbarVerseList CurrentBookChapterVerse="CurrentBookChapterVerse"
										 OnBookChapterVerseSelected="ReturnedBookChapterVerse"
										 MediaQuery="GlobalEnums.MediaQuery.Sm" />
	</div>
	<div class="@GlobalEnums.MediaQuery.Md.DivClass">
		<NavbarVerseList CurrentBookChapterVerse="CurrentBookChapterVerse"
										 OnBookChapterVerseSelected="ReturnedBookChapterVerse"
										 MediaQuery="GlobalEnums.MediaQuery.Md" />
	</div>
	<div class="@GlobalEnums.MediaQuery.Lg.DivClass">
		<NavbarVerseList CurrentBookChapterVerse="CurrentBookChapterVerse"
										 OnBookChapterVerseSelected="ReturnedBookChapterVerse"
										 MediaQuery="GlobalEnums.MediaQuery.Lg" />
	</div>
	<div class="@GlobalEnums.MediaQuery.Xl.DivClass">
		<NavbarVerseList CurrentBookChapterVerse="CurrentBookChapterVerse"
										 OnBookChapterVerseSelected="ReturnedBookChapterVerse"
										 MediaQuery="GlobalEnums.MediaQuery.Xl" />
	</div>
}
else
{
	<p> <b>Features\VerseList\Index.razor</b> <code>CurrentBookChapterVerse IS null</code></p>
}

@if (CurrentBookChapterVerse is not null)
{
	<LoadingProgress>
		<div class="mt-5">
			<br />
			<Sections BookChapterVerse="CurrentBookChapterVerse" />
		</div>
	</LoadingProgress>
}

@code {
	[Parameter, EditorRequired] public int BookId { get; set; }
	[Parameter, EditorRequired] public int Chapter { get; set; }
	[Parameter, EditorRequired] public int BegVerse { get; set; }
	[Parameter, EditorRequired] public int EndVerse { get; set; } // currently not referenced

	public Header? CurrentHeader { get; set; }
	public BookChapterVerse? CurrentBookChapterVerse { get; set; }

	[CascadingParameter] public CascadingAppState? CascadingAppState { get; set; }

	protected string PageTitle => GlobalEnums.BibleBookFormat.BCV(CurrentBookChapterVerse, useAbrv: false);

	//protected override void OnParametersSet()
	protected override async Task OnParametersSetAsync()
	{
		//Logger!.LogInformation("{Method}, Route BCVbVe: {BookId}/{Chapter}/{BegVerse}/{EndVerse}"
		//	, nameof(OnParametersSet), BookId, Chapter, BegVerse, EndVerse);
		try
		{
			if (BookId == 0 && Chapter == 0) //  && BegVerse == 0 && EndVerse == 0 the first two should be sufficient
			{
				//Toast!.ShowSuccess("OnParametersSetAsync | B&C=0");
				ReNavigateBackToThisPage();
			}
			else
			{
				ValidationTuple vt = ValidateRouteParameters();
				if (vt.IsValid)
				{
					CurrentBookChapterVerse = vt.BCV;
					//Toast!.ShowSuccess("OnParametersSetAsync");
					await CascadingAppState!.AppState!.VerseListState!.UpdateBCV(
						new DetailRecord(vt.BCV!.BookAndChapter.BibleBook, vt.BCV.BookAndChapter.Chapter
							, vt.BCV.Verse, vt.BCV.Verse, "Updated inside OnParametersSetAsync"));

					ReNavigateBackToThisPage();
				}
				else
				{
					Toast!.ShowWarning(vt.ErrorMessage);
					ReNavigateBackToThisPage();
				}
					
			}
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "VerseList!{Class}!{Method}", nameof(Index), nameof(OnParametersSet));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(Index)}!{nameof(OnParametersSet)}");
		}
	}

	private ValidationTuple ValidateRouteParameters()
	{
		GlobalEnums.BibleBook? bibleBook;
		if (GlobalEnums.BibleBook.TryFromValue(BookId, out bibleBook))
		{
			if (Chapter >= 1 && Chapter <= bibleBook!.LastChapter)
			{
				if ((BegVerse >= 1 && BegVerse <= bibleBook.LastVerses[Chapter - 1]) &&
						(EndVerse >= 1 && EndVerse <= bibleBook.LastVerses[Chapter - 1]) &&
						(BegVerse <= EndVerse) )
				{
					return new ValidationTuple(true, "", new BookChapterVerse(new BookAndChapter(bibleBook, Chapter), BegVerse));
				}
				else
				{
					return new ValidationTuple(false, $"Beginning verse {BegVerse} and/or ending verse: {EndVerse} is in valid", new BookChapterVerse(new BookAndChapter(GlobalEnums.BibleBook.Genesis, 1), 1));
				}

			}
			else
			{
				return new ValidationTuple(false, $"Chapter: {Chapter} is in valid", new BookChapterVerse(new BookAndChapter(GlobalEnums.BibleBook.Genesis, 1), 1));
			}
		}
		else
		{
			return new ValidationTuple(false, $"BookId: {BookId} is in valid", new BookChapterVerse(new BookAndChapter(GlobalEnums.BibleBook.Genesis, 1), 1));
		}
	}


	private void ReNavigateBackToThisPage()
	{
		// Last member FYI , string? NotesMD
		DetailRecord? bcv = CascadingAppState!.AppState!.VerseListState!.GetBCV();
		if (bcv is null)
		{
			Logger!.LogInformation("{Method}, bcv is null???", nameof(OnParametersSet));
			Toast!.ShowWarning($"bcv is null, DetailRecord not found");
		}
		else
		{
			GlobalEnums.BibleBook bibleBook = GlobalEnums.BibleBook.FromValue(bcv.BibleBookId);
			NavigationManager!.NavigateTo(Components.Helper.GetNavigateToUrlVerseList(bibleBook, bcv.Chapter, bcv.BegVerse, bcv.EndVerse));
		}
	}

	//private async Task ReturnedBookChapterVerse(BookChapterVerse bookChapterVerse)
	private void ReturnedBookChapterVerse(BookChapterVerse bookChapterVerse)
	{
		NavigationManager!.NavigateTo($"verselist/{bookChapterVerse.BookAndChapter.BibleBook!.Value}/{bookChapterVerse.BookAndChapter.Chapter}/{bookChapterVerse.Verse}/{bookChapterVerse.Verse}");

		Toast!.ShowInfo("ReturnedBookChapterVerse");
		// await CascadingAppState!.AppState!.VerseListState!.UpdateBCV(
		// 	new DetailRecord(bookChapterVerse.BookAndChapter.BibleBook, bookChapterVerse.BookAndChapter.Chapter, 
		// 		bookChapterVerse.Verse, bookChapterVerse.Verse, "Updated inside ReturnedBookChapterVerse"));

		CurrentBookChapterVerse = bookChapterVerse;
	}
	// Ignore Spelling: bcv, verselist, bookid, begverse, endverse


}
