@page "/VerseList"

@using MyHebrewBible.Client.Components.BibleLookup
@using MyHebrewBible.Client.Components.BibleLookup.Toolbar;
@using MyHebrewBible.Client.Components.VerseSections
@using EnumCalledBy = MyHebrewBible.Client.Components.VerseSections.Enums.CalledBy
@using MyHebrewBible.Client.State.VerseList

@inject ILogger<Index>? Logger
@inject IToastService? Toast

<PageTitle>@PageTitle</PageTitle>

<div class="@GlobalEnums.MediaQuery.Xs.DivClass">
	<NavbarVerseList CurrentBookChapterVerse="CurrentVM"
									 OnBookChapterVerseSelected="ReturnedBookChapterVerse"
									 MediaQuery="GlobalEnums.MediaQuery.Xs" />
</div>
<div class="@GlobalEnums.MediaQuery.Sm.DivClass">
	<NavbarVerseList CurrentBookChapterVerse="CurrentVM"
									 OnBookChapterVerseSelected="ReturnedBookChapterVerse"
									 MediaQuery="GlobalEnums.MediaQuery.Sm" />
</div>
<div class="@GlobalEnums.MediaQuery.Md.DivClass">
	<NavbarVerseList CurrentBookChapterVerse="CurrentVM"
									 OnBookChapterVerseSelected="ReturnedBookChapterVerse"
									 MediaQuery="GlobalEnums.MediaQuery.Md" />
</div>
<div class="@GlobalEnums.MediaQuery.Lg.DivClass">
	<NavbarVerseList CurrentBookChapterVerse="CurrentVM"
									 OnBookChapterVerseSelected="ReturnedBookChapterVerse"
									 MediaQuery="GlobalEnums.MediaQuery.Lg" />
</div>
<div class="@GlobalEnums.MediaQuery.Xl.DivClass">
	<NavbarVerseList CurrentBookChapterVerse="CurrentVM"
									 OnBookChapterVerseSelected="ReturnedBookChapterVerse"
									 MediaQuery="GlobalEnums.MediaQuery.Xl" />
</div>

@if (CurrentVM is not null)
{
	<div class="mt-5">
		<br />
		<Sections VM="CurrentVM" CalledBy="EnumCalledBy.VerseList" />
	</div>
}

@code {

	public Header? CurrentHeader { get; set; }
	public BookChapterVerse? CurrentVM { get; set; }

	[CascadingParameter] public CascadingAppState? CascadingAppState { get; set; }

	protected string PageTitle => GlobalEnums.BibleBookFormat.BCV(CurrentVM, useAbrv: false);

	protected override void OnInitialized()
	{
		Logger!.LogInformation("{Method}", nameof(OnInitialized));
		try
		{
			/*
			Header header = state!.GetHeader();
			CurrentHeader = new BookAndChapter(BibleBook.FromValue(_state.BibleBookId), _state.Chapter);
			*/
			DetailRecord bcv = CascadingAppState!.AppState!.VerseListState!.GetBCV();
			BookAndChapter bookAndChapter = new BookAndChapter(GlobalEnums.BibleBook.FromValue(bcv.BibleBookId), bcv.Chapter);
			CurrentVM = new BookChapterVerse(bookAndChapter, bcv.BegVerse);
			//PageTitle = GlobalEnums.BibleBookFormat.BCV(CurrentVM); 

		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "VerseList!{Class}!{Method}", nameof(Index), nameof(OnInitialized));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(Index)}!{nameof(OnInitialized)}");
		}
	}

	private async Task ReturnedBookChapterVerse(BookChapterVerse vm)  //async Task
	{
		CurrentVM = vm!;
		//state!.UpdateHeader(new VerseListState(CurrentBookAndChapter.BibleBook!.Value, CurrentBookAndChapter.Chapter));
		await CascadingAppState!.AppState!.VerseListState!.UpdateBCV(new DetailRecord(vm.BookAndChapter.BibleBook, vm.BookAndChapter.Chapter, vm.Verse, vm.Verse, "Just Got Updated"));
	}

}