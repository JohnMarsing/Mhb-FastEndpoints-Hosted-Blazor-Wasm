@inject ApiClient Api
@inject ILogger<TableRowCntTable>? Logger
@inject IToastService? Toast

<LoadingComponent IsLoading="tableRowCnts==null" TurnSpinnerOff="TurnSpinnerOff">
	<TableTemplate Items="tableRowCnts!.OrderBy(o => o.Name).ToList()" HeaderCSS="table table-condensed table-sm table-hover">
		<TableHeader>
			<th class="text-primary float-end">Count</th>
			<th class="text-primary">Name</th>
		</TableHeader>
		<RowTemplate>
			<td class="float-end">@context.RowCnt.ToString("N0")</td>
			<td>@context.Name</td>
		</RowTemplate>
	</TableTemplate>
</LoadingComponent>

<p><b>ToDo</b>: Add a column that show the <code>Previous Count</code></p>

<p><b>ToDo</b>: Make an <code>Enum</code> for HeaderCSS picker with rules like...<br /> 
	<span class="ms-3">table-striped` and `table-hover` are (or should be) mutually exclusive</span> 
</p>

@code {
	protected bool TurnSpinnerOff = false;
	private ICollection<TableRowCount>? tableRowCnts = null;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			tableRowCnts = await Api.GetTableRowCountsAsync(0);
			if (tableRowCnts is null)
			{
				Toast!.ShowWarning($"TableRowCount not found (◡︵◡)");
			}
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnInitializedAsync));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(Index)}!{nameof(OnInitializedAsync)}");
		}
		finally
		{
			TurnSpinnerOff = true;
		}
	}

}
