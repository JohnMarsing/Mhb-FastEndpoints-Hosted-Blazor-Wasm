@page "/HealthChecks/Toggle"
@using MyHebrewBible.Client.Helpers
@inject ILogger<Index>? Logger

<h3>Health Check Toggle</h3>

<div class="card border-success mb-2">
	<div class="card-header">
		<div class="d-flex justify-content-between">
			<div class="fs-2">
				A <code>card-header</code>
			</div>
			<div>
				<p>
					<button class="btn @BtnColors.Warning @BtnSize.Lg" @onclick="ButtonClicked" title="">
						@if (ShowToggleIcon)
						{
							<i class="@Icon.Toggle.Get(isOn:ToggleValue) @Icon.Size.TwoX"></i>
						}
						<span class="fs-4">@ButtonText</span>
						<i class="@Icon.Chevron.Get(isDown:ChevronValue) @Icon.Size.TwoX"></i>
					</button>
				</p>
			</div>

		</div>
	</div>

	@if (ToggleValue)
	{
		<div class="card-footer">
			<h6>Detailed Explanation</h6>
			<p>Explaining the <i>state</i> of a <b>Show</b> Details /  <b>Hide</b> Details scenario</p>

			<h5>Toggle</h5>
			<p class="ps-2">
				The <i>toggle</i> paradigm reflects the <b>current</b> <i>state</i><br />
				Toggle Is <b>Off</b> <i class="@Icon.Toggle.Off @Icon.Size.TwoX"></i> means Show<i>ing</i> <b>Less</b><br />
				Toggle Is <b>On</b> <i class="@Icon.Toggle.On @Icon.Size.TwoX"></i> means Show<i>ing</i> <b>More</b><br />
				The toggle is an indicator of what the state <b>currently IS</b>
			</p>

			<h5>Chevron</h5>
			<p class="ps-2">
				The <i>chevron</i> paradigm reflects what the <i>state</i> <b>could be</b> (which would be the opposite of what it currently is.)<br />
				Chevron Is <b>Down</b> <i class="@Icon.Chevron.Down @Icon.Size.TwoX"></i> means change the state to Show <b>More</b><br />
				Chevron Is <b>Up</b> <i class="@Icon.Chevron.Up  @Icon.Size.TwoX"></i> means change the state to Show <b>Less</b><br />
				The Chevron is an indicator of what the current state <b>could BE</b>
			</p>

		</div>
	}

</div>


@code {
	bool ToggleValue = false;
	bool ChevronValue = false;
	bool ShowToggleIcon = false;

	private string ButtonText => ToggleValue ? "Hide Details" : "Show Details";


	private void ButtonClicked()
	{
		ToggleValue = (!ToggleValue);
		ChevronValue = (!ChevronValue);
	}

}
