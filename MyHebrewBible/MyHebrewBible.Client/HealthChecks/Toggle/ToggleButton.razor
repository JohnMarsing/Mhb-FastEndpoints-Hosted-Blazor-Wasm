@using MyHebrewBible.Client.Helpers

@inject ILogger<ToggleButton>? Logger

@* <button class="btn @_buttonSize @_buttonColor! mt-1 me-2" *@

<button class="btn @_buttonSize mt-1 me-2"
				@onclick="ButtonClicked" title="@_title">
	<i class="@_iconSize @_icon"></i>
	<span class="navbar-toggler-icon"></span>
</button>

@code {

	[Parameter, EditorRequired] public bool CurrentBoolValue { get; set; }
	[Parameter, EditorRequired] public EventCallback<bool> OnToggleSelected { get; set; }
	[Parameter] public ButtonSize ButtonSize { get; set; }
	//[Parameter] public string ButtonColorSelected { get; set; } = Anchors.BtnColors.Dark;
	//[Parameter] public string ButtonColorUnSelected { get; set; } = Anchors.BtnColors.Secondary;
	[Parameter] public string Title { get; set; } = string.Empty;
	[Parameter] public bool IconIsHamburger { get; set; } = false;

	public bool _currentBoolValue { get; set; }
	protected string? _buttonSize; // btn-lg" : "btn-sm";
	//protected string? _buttonColor;
	protected string? _iconSize;
	protected string? _icon;
	protected string? _title;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		_buttonSize = Helpers.ButtonCss.Size(ButtonSize);
		_iconSize = Client.Helpers.ButtonCss.IconSize(ButtonSize);
		_title = Title;
		SetInitialUI();
	}

	private void SetInitialUI()
	{
		//_buttonColor = _currentBoolValue! ? Anchors.BtnColors.Dark! : Anchors.BtnColors.Secondary!;

		if (IconIsHamburger)
		{
			_icon = "fas fa-bars";
		}
		else
		{
			_icon = _currentBoolValue! ? "fas fa-toggle-on" : "fas fa-toggle-off";
		}
	}

	protected override void OnParametersSet()
	{
		Logger!.LogInformation("{Class}!{Method}; CurrentBoolValue: {CurrentBoolValue}"
		, nameof(ToggleButton), nameof(OnParametersSet), CurrentBoolValue);
		_currentBoolValue = CurrentBoolValue;
	}

	private void ButtonClicked()
	{
		// Logger!.LogInformation("razor {Class}{MethodEvent}; CurrentBoolValue: {_currentBoolValue}"
		// , nameof(ToggleButton), nameof(ButtonClicked), _currentBoolValue);
		OnToggleSelected.InvokeAsync(!_currentBoolValue); // flip the boolean value
	}



}

